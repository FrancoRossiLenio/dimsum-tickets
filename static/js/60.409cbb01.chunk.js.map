{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","Toggle/Overview.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js","../../../../../src/form/Toggle/props.js","../../../../../src/form/Toggle/toggleHelper.js","../../../src/onClickHandlerForNonInteractiveElements.js","../../../../../src/form/Toggle/DSToggleRender.js","../../../../../src/form/Toggle/DSToggleImpl.js","../../../../../src/form/Toggle/DSToggle.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_setPrototypeOf","o","p","setPrototypeOf","__proto__","_getPrototypeOf","getPrototypeOf","_isNativeReflectConstruct","Reflect","construct","sham","Proxy","Date","prototype","toString","call","e","_typeof","obj","Symbol","iterator","constructor","_possibleConstructorReturn","self","ReferenceError","Overview","subClass","superClass","create","value","Derived","protoProps","staticProps","result","Super","NewTarget","this","arguments","apply","state","isChecked","checked","setState","DSToggle","containerProps","id","onChange","handleChange","Component","togglePropTypes","PropTypes","hasError","readOnly","disabled","labelOn","labelOff","size","name","string","cleanDrag","startPoint","isDragging","dragStartingPoints","circleWidth","boxWidth","drag","onClickHandler","role","tabIndex","onClick","onKeyPress","event","keycode","className","style","onBlur","onFocus","onMouseDown","onMouseEnter","onMouseLeave","onTouchCancel","onTouchEnd","onTouchMove","onTouchStart","dragStyle","containerRef","handRef","defaultState","convertPropToCssClassName","cssClassName","classNameBlock","classNameElement","allowChange","data-testid","aria-disabled","defaultChecked","defaultValue","onClickHandlerForNonInteractiveElements","ref","aria-checked","type","DSToggleImpl","move","clientX","calculateDrag","inside","isValidDrag","newCheck","window","React","prevProps","prevState","snapshot","currentCheckState","checkedProp","nodesInterval","setInterval","clearInterval","left","otherProps"],"mappings":"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","file":"static/js/60.409cbb01.chunk.js","sourcesContent":["export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import React, { Component } from 'react';\nimport DSToggle from '@elliemae/ds-basic/form/Toggle';\n\nexport default class Overview extends Component {\n  state = {\n    isChecked: true,\n  };\n  handleChange(e) {\n    const { checked } = e.target;\n    this.setState({ isChecked: checked });\n  }\n  render() {\n    const { isChecked } = this.state;\n    return (\n      <div>\n        <DSToggle\n          checked={isChecked}\n          containerProps={{ id: 'my-custom-id' }}\n          onChange={this.handleChange}\n          value=\"myVal\"\n        />\n        <h3>{isChecked ? 'TRUE' : 'FALSE'}</h3>\n      </div>\n    );\n  }\n}\n","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import getPrototypeOf from \"./getPrototypeOf\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn\";\nexport default function _createSuper(Derived) {\n  return function () {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (isNativeReflectConstruct()) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}","import PropTypes from 'prop-types';\nimport { sizes } from '../../utils/prop-types';\n\nexport const togglePropTypes = {\n  /**\n   * Set of Properties attached to the main container\n   */\n  containerProps: PropTypes.shape({}),\n  /**\n   * Whether the toggle has error or not\n   */\n  hasError: PropTypes.bool,\n  /**\n   * Whether the toggle is read only or not\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Whether the toggle is disabled or not\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Whether the toggle is checked or not\n   */\n  checked: PropTypes.bool,\n  /**\n   * Allows a function that is triggered once the toggle changes\n   */\n  onChange: PropTypes.func,\n  /**\n   * Label to show when the toggle is ON\n   */\n  labelOn: PropTypes.string,\n  /**\n   * Label to show when the toggle is OFF\n   */\n  labelOff: PropTypes.string,\n  /**\n   * Default value once the component is initialized\n   */\n  value: PropTypes.string,\n  /**\n   * ['s', 'm', 'l']\n   */\n  size: PropTypes.oneOf(sizes),\n  /**\n   * Input name\n   */\n  name: PropTypes.string,\n};\n","export const isValidDrag = ({\n  inside,\n  circleWidth,\n  drag,\n  checked,\n  boxWidth,\n}) => {\n  const difference = boxWidth - circleWidth;\n  return checked\n    ? !inside && -drag > difference / 2\n    : !inside && drag > boxWidth / 3;\n};\n\nexport const cleanDrag = () => ({\n  startPoint: null,\n  isDragging: false,\n});\n\nexport const calculateDrag = (\n  clientX,\n  { startPoint, checked, isDragging, boxWidth, circleWidth },\n) => {\n  if (!isDragging) return null;\n  const move = startPoint - clientX;\n  const drag = !checked ? clientX - startPoint : boxWidth - circleWidth - move;\n  if (!checked && clientX > 0 && clientX > startPoint && drag < boxWidth * 0.7)\n    return drag;\n  if (checked && clientX > 0 && clientX < startPoint && move < boxWidth * 0.7)\n    return drag;\n  return null;\n};\n\nexport const dragStartingPoints = checked => ({ circleWidth, boxWidth }) => {\n  if (checked) return { drag: boxWidth - circleWidth };\n  return {\n    drag: 0,\n  };\n};\n","/**\n * onClickHandler: callback\n *\n * @param onClickHandler\n */\nexport default onClickHandler => ({\n  role: 'button',\n  tabIndex: '0',\n  onClick: onClickHandler,\n  onKeyPress: event => {\n    event.stopPropagation();\n    const { keycode, key } = event;\n    if (key === 'Enter') onClickHandler(event);\n    else if (keycode === 13) onClickHandler(event);\n  },\n});\n","/* eslint-disable react/prop-types */\n/* eslint-disable complexity */\nimport React from 'react';\nimport onClickHandlerForNonInteractiveElements from '@elliemae/ds-utilities/onClickHandlerForNonInteractiveElements';\nimport { convertPropToCssClassName } from '@elliemae/ds-classnames';\n\nconst DSToggleRender = ({\n  containerProps,\n  id,\n  className = '',\n  style = {},\n  hasError = false,\n  readOnly = false,\n  disabled = false,\n  checked = false,\n  onBlur = () => null,\n  onFocus = () => null,\n  onChange = () => null,\n  onMouseDown = () => null,\n  onMouseEnter = () => null,\n  onMouseLeave = () => null,\n  onTouchCancel = () => null,\n  onTouchEnd = () => null,\n  onTouchMove = () => null,\n  onTouchStart = () => null,\n  labelOn = 'ON',\n  labelOff = 'OFF',\n  dragStyle = {},\n  containerRef = null,\n  handRef = null,\n  name = '',\n  value = '',\n  size = 's',\n  defaultState,\n}) => {\n  const {\n    cssClassName,\n    classNameBlock,\n    classNameElement,\n  } = convertPropToCssClassName('form-element-toggle', className, {\n    hasError,\n    readOnly,\n    disabled,\n    checked,\n    id,\n    size,\n  });\n  const allowChange = disabled || readOnly;\n  return (\n    <div\n      {...containerProps}\n      data-testid=\"em-ds-toggle\"\n      aria-disabled={disabled}\n      defaultChecked={checked}\n      defaultValue={value}\n      {...onClickHandlerForNonInteractiveElements(\n        allowChange ? null : onChange,\n      )}\n      ref={containerRef}\n      className={`${cssClassName} ${\n        defaultState ? 'default-state-checked' : ''\n      }`}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      // eslint-disable-next-line jsx-a11y/role-has-required-aria-props\n      aria-checked={checked}\n      role=\"checkbox\"\n      tabIndex={0}\n    >\n      <div className={classNameBlock('box')}>\n        {checked && (\n          <div className={classNameElement('icon-on')}>{labelOn}</div>\n        )}\n        {!checked && (\n          <div className={classNameElement('icon-off')}>{labelOff}</div>\n        )}\n      </div>\n      <div\n        ref={handRef}\n        aria-checked={checked}\n        aria-disabled={disabled}\n        className={`${classNameElement('input')} ${\n          defaultState ? 'default-state-checked' : ''\n        }`}\n        onMouseDown={allowChange ? null : onMouseDown}\n        onMouseEnter={allowChange ? null : onMouseEnter}\n        onMouseLeave={allowChange ? null : onMouseLeave}\n        onTouchCancel={allowChange ? null : onTouchCancel}\n        onTouchEnd={allowChange ? null : onTouchEnd}\n        onTouchMove={allowChange ? null : onTouchMove}\n        onTouchStart={allowChange ? null : onTouchStart}\n        style={{\n          ...style,\n          ...dragStyle,\n        }}\n      />\n      <input\n        className={classNameElement('hidden-checkbox')}\n        defaultChecked={checked}\n        defaultValue={value}\n        name={name}\n        type=\"checkbox\"\n      />\n    </div>\n  );\n};\n\nexport default DSToggleRender;\n","/* eslint-disable max-lines */\nimport React, { Component } from 'react';\nimport {\n  isValidDrag,\n  cleanDrag,\n  calculateDrag,\n  dragStartingPoints,\n} from './toggleHelper';\nimport DSToggleRender from './DSToggleRender';\nimport { togglePropTypes } from './props';\n\nclass DSToggleImpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      checked: props.checked || false,\n      inside: false,\n      isDragging: false,\n      drag: null,\n      startPoint: null,\n      circleWidth: null,\n      boxWidth: null,\n      ...dragStartingPoints(props.checked || false),\n    };\n    this.circle = React.createRef();\n    this.box = React.createRef();\n  }\n\n  componentDidMount() {\n    this.verifyElements();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (snapshot) {\n      this.verifyElements();\n    }\n  }\n\n  /**\n   * ******************************************************\n   * Drag\n   * ****************************************************** *\n   *\n   * @param clientX\n   */\n  onDragStart = (clientX) => {\n    const {\n      startPoint,\n      checked,\n      isDragging,\n      boxWidth,\n      circleWidth,\n    } = this.state;\n    // const { checked: checkedProp, } = this.props\n    const drag = calculateDrag(clientX, {\n      startPoint,\n      checked,\n      isDragging,\n      boxWidth,\n      circleWidth,\n    });\n    if (drag) this.setState({ drag });\n    // else this.setDragOnChange(checkedProp != null ? checkedProp : checked) // set initial position\n    else this.setDragOnChange(checked); // set initial position\n  };\n\n  onDragStop = (e) => {\n    const { checked } = this.state;\n    // const { checked: checkedProp, } = this.props\n    if (isValidDrag(this.state)) {\n      this.onChange(e);\n      this.setState(cleanDrag);\n      // } else this.setDragOnChange(checkedProp != null ? checkedProp : checked) // set initial position\n    } else this.setDragOnChange(checked); // set initial position\n  };\n\n  /**\n   * ******************************************************\n   * StandardEvents\n   * ****************************************************** *\n   *\n   * @param e\n   */\n  onBlur = (e) => {\n    const { onBlur, id } = this.props;\n    if (onBlur) onBlur(e, id);\n  };\n\n  onFocus = (e) => {\n    const { onFocus, id } = this.props;\n    if (onFocus) onFocus(e, id);\n  };\n\n  onChange = (e) => {\n    const { checked } = this.state;\n    const {\n      onChange,\n      id,\n      value,\n      // checked: checkedProp,\n    } = this.props;\n    const newCheck = !checked;\n    // this.setState({\n    //   checked: checkedProp != null ? checkedProp : newCheck,\n    // })\n    this.setState({\n      checked: newCheck,\n    });\n    e.target.value = value;\n    e.target.checked = newCheck;\n    e.checked = newCheck;\n    onChange(e, id);\n    // this.setDragOnChange(checkedProp != null ? checkedProp : newCheck) // set new position\n    this.setDragOnChange(newCheck); // set new position\n  };\n\n  /** ******************************************************\n      MouseEvents\n   ******************************************************* * */\n  onMouseEnter = () => {\n    this.setState({ inside: true });\n  };\n\n  onMouseLeave = () => {\n    this.setState({ inside: false });\n  };\n\n  onMouseMove = (event) => {\n    event.preventDefault();\n    this.onDragStart(event.clientX);\n  };\n\n  onMouseDown = (event) => {\n    this.onDragStart(event.clientX);\n    this.setState({ startPoint: event.clientX, isDragging: true });\n    window.addEventListener('mousemove', this.onMouseMove);\n    window.addEventListener('mouseup', this.onMouseUp);\n  };\n\n  onMouseUp = (event) => {\n    this.onDragStop(event);\n    window.removeEventListener('mousemove', this.onMouseMove);\n    window.removeEventListener('mouseup', this.onMouseUp);\n  };\n\n  /** ******************************************************\n      Touch\n   ******************************************************* * */\n  onTouchCancel = () => {\n    this.setState({ inside: false });\n  };\n\n  onTouchEnd = (event) => {\n    event.preventDefault();\n    this.onDragStop(event);\n  };\n\n  onTouchMove = (event) => {\n    this.onDragStart(event.touches[0].clientX);\n  };\n\n  onTouchStart = (event) => {\n    this.onDragStart(event.touches[0].clientX);\n    this.setState({ startPoint: event.touches[0].clientX, isDragging: true });\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.checked) {\n      return {\n        checked: props.checked,\n        ...dragStartingPoints(props.checked)(state),\n      };\n    }\n    return null;\n  }\n\n  getSnapshotBeforeUpdate(prevProps) {\n    const { size } = this.props;\n    if (prevProps.size !== size) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * ******************************************************\n   * other\n   * ****************************************************** *\n   *\n   * @param currentCheckState\n   */\n  setDragOnChange(currentCheckState) {\n    this.setState(dragStartingPoints(currentCheckState));\n  }\n\n  verifyElements() {\n    const { checked } = this.state;\n    const { checked: checkedProp } = this.props;\n    const nodesInterval = setInterval(() => {\n      // !important it checks when nodes are availables\n      if (\n        !this.circle ||\n        !this.box ||\n        !this.circle.current ||\n        !this.box.current\n      )\n        return;\n      const {\n        current: { clientWidth: circleWidth },\n      } = this.circle;\n      const {\n        current: { clientWidth: boxWidth },\n      } = this.box;\n      if (!circleWidth || !boxWidth || circleWidth === boxWidth) return;\n      this.setState({\n        boxWidth,\n        circleWidth,\n      });\n      this.setDragOnChange(checkedProp != null ? checkedProp : checked);\n      // this.setDragOnChange(checked)\n      clearInterval(nodesInterval);\n    }, 5);\n  }\n\n  render() {\n    const { checked, drag, inside } = this.state;\n    const dragStyle =\n      drag !== null || checked || this.props.checked\n        ? { left: `${drag}px` }\n        : null;\n    return (\n      <DSToggleRender\n        {...this.props}\n        defaultState={this.props.checked}\n        checked={checked}\n        containerRef={this.box}\n        dragStyle={dragStyle}\n        handRef={this.circle}\n        inside={inside}\n        onBlur={this.onBlur}\n        onChange={this.onChange}\n        onFocus={this.onFocus}\n        onMouseDown={this.onMouseDown}\n        onMouseEnter={this.onMouseEnter}\n        onMouseLeave={this.onMouseLeave}\n        onTouchCancel={this.onTouchCancel}\n        onTouchEnd={this.onTouchEnd}\n        onTouchMove={this.onTouchMove}\n        onTouchStart={this.onTouchStart}\n      />\n    );\n  }\n}\n\nDSToggleImpl.propTypes = togglePropTypes;\n\nexport default DSToggleImpl;\n","import React from 'react';\nimport ToggleImpl from './DSToggleImpl';\nimport { togglePropTypes } from './props';\n\nconst DSToggle = ({\n  containerProps = {},\n  hasError = false,\n  readOnly = false,\n  disabled = false,\n  checked = undefined,\n  labelOn = 'ON',\n  labelOff = 'OFF',\n  name = '',\n  value = '',\n  size = 's',\n  ...otherProps\n}) => (\n  <ToggleImpl\n    {...otherProps}\n    checked={checked}\n    containerProps={containerProps}\n    disabled={disabled}\n    hasError={hasError}\n    labelOff={labelOff}\n    labelOn={labelOn}\n    name={name}\n    readOnly={readOnly}\n    size={size}\n    value={value}\n  />\n);\n\nDSToggle.propTypes = togglePropTypes;\n\nexport default DSToggle;\n"],"sourceRoot":""}