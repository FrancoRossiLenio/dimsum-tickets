{"version":3,"sources":["DateTimePicker/PUI-3993.js"],"names":["memo","useState","label","show","toggle","setToggle","value","loan","setLoan","useEffect","setTimeout","moment","changeEvent","event","newValue","changeListener","selectedDate","_i","isValid","console","log","style","width","onClick","e","preventDefault","date","datePickerProps","hideKeyboardShortcutsPanel","onDateChange","placeholder","timePickerProps","containerProps","id","disabled","onChange"],"mappings":"+JAmEeA,0BAhEG,WAChB,IADsB,EAEMC,mBAAS,CACnCC,MAAO,OACPC,MAAM,IAJc,mBAEfC,EAFe,KAEPC,EAFO,OAMEJ,mBAAS,CAC/BK,MAAO,OAPa,mBAMfC,EANe,KAMTC,EANS,KAUtBC,qBAAU,WACRC,YAAW,kBAAMF,EAAQ,CAAEF,MAAOK,IAVjB,4BAUuC,OACvD,IAEH,IAAMC,EAAc,SAACC,GACnB,IAAMC,EAAWD,EAAQF,IAAOE,GAASA,EACzCL,EAAQ,CACNF,MAAOQ,KAGLC,EAAiB,SAACC,GACjBA,EAAaC,IAIhBN,IAAOK,EAAaC,GAAI,cAAc,GAAMC,WAC5CP,IAAOK,EAAaC,GAAI,cAAc,GAAMC,aAE5CC,QAAQC,IAAI,iBAAiBJ,GAC7BJ,EAAYI,KAPZG,QAAQC,IAAI,eAAeJ,GAC3BJ,EAAYI,KAkBhB,OACE,yBAAKK,MAAO,CAACC,MAAO,UAClB,4BAAQC,QAXZ,SAAqBC,GACnBA,EAAEC,iBACF,IAAMtB,GAAQC,EAAOD,KACfD,EAAQE,EAAOD,KAAO,OAAS,OACrCE,EAAU,CACRH,MAAOA,EACPC,KAAMA,MAKyBC,EAAOF,OACpCE,EAAOD,KACP,kBAAC,IAAD,CACEmB,MAAO,IACPI,KAAMnB,EAAKD,MACXqB,gBAAiB,CACfC,4BAA4B,EAC5BC,aAAcd,GAEhBe,YAAY,uBACZC,gBAAiB,CACfC,eAAgB,CAAEC,GAAI,gBACtBC,UAAU,EACVC,SAAUpB,KAGZ,U","file":"static/js/57.ad784659.chunk.js","sourcesContent":["import React, {useState, useEffect, memo} from 'react';\nimport moment from 'moment';\nimport DSDateTimePicker from '@elliemae/ds-date-time-picker';\nconst Component = () => {\n  const fieldValue = '2020-08-21T19:38:28Z'\n  const [toggle, setToggle] = useState({\n    label: 'HIDE',\n    show: true\n  });\n  const [loan, setLoan] = useState({\n    value: null\n  });\n\n  useEffect(() => {\n    setTimeout(() => setLoan({ value: moment(fieldValue)}), 3000)\n  }, [])\n\n  const changeEvent = (event) => {\n    const newValue = event ? moment(event) : event;\n    setLoan({\n      value: newValue,\n    });\n  };\n  const changeListener = (selectedDate) => {\n    if (!selectedDate._i) {\n      console.log('selectDate: ',selectedDate);\n      changeEvent(selectedDate);\n    } else if (\n      moment(selectedDate._i, 'YYYY-MM-DD', true).isValid() ||\n      moment(selectedDate._i, 'MM/DD/YYYY', true).isValid()\n    ) {\n      console.log('1.selectDate: ',selectedDate);\n      changeEvent(selectedDate);\n    }\n  };\n  function toggleValue(e) {\n    e.preventDefault();\n    const show = !toggle.show;\n    const label = toggle.show ? 'SHOW' : 'HIDE';\n    setToggle({\n      label: label,\n      show: show\n    });\n  }\n  return (\n    <div style={{width: '200px'}}>\n      <button onClick={toggleValue}>{toggle.label}</button>\n      { toggle.show ?\n        <DSDateTimePicker\n          width={200}\n          date={loan.value}\n          datePickerProps={{\n            hideKeyboardShortcutsPanel: true,\n            onDateChange: changeListener,\n          }}\n          placeholder=\"Select date and time\"\n          timePickerProps={{\n            containerProps: { id: 'my-custom-id' },\n            disabled: false,\n            onChange: changeListener,\n          }}\n        />\n        : null\n      }\n    </div>\n  )\n}\nexport default memo(Component);\n"],"sourceRoot":""}