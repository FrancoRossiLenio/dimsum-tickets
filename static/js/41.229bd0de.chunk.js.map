{"version":3,"sources":["ComboBox/options.js","ComboBox/Bottom.js","../../../../../../src/form/ComboBox/v1/withSelectStringValueConverter.js","../../../../../../src/form/ComboBox/v2/context.js","../../../../../../src/form/ComboBox/v2/components/DropdownIndicator.js","../../../../../../src/form/ComboBox/v2/components/GroupHeading.js","../../../../../../src/form/ComboBox/v2/components/utils.js","../../../../../../src/form/ComboBox/v2/components/Content.js","../../../../../../src/form/ComboBox/v2/components/SelectMenu.js","../../../../../../src/form/ComboBox/v2/components/Control.js","../../../../../../src/form/ComboBox/v2/components/ClearIndicator.js","../../../../../../src/form/ComboBox/v2/components/CustomOption.js","../../../../../../src/form/ComboBox/v2/components/CustomOptionMulti.js","../../../../../../src/form/ComboBox/v2/components/MultiSelectHeader.js","../../../../../../src/form/ComboBox/v2/components/MenuList.js","../../../../../../src/form/ComboBox/v2/components/MultiValueLabel.js","../../../../../../src/form/ComboBox/v2/components/MultiValueRemove.js","../../../../../../src/form/ComboBox/v2/components/SingleValueLabel.js","../../../../../../src/form/ComboBox/v2/components/LoadingIndicator.js","../../../../../../src/form/ComboBox/v2/components/ValueContainer.js","../../../../../../src/form/ComboBox/v2/Combobox.js","../../../../../../src/form/ComboBox/v2/components/calculateWidth.js"],"names":["options","Array","fill","map","el","i","label","value","useState","setValue","p","style","height","placeholder","onChange","val","maxOptions","findOption","valueProperty","index","option","getOptionFromValue","isMulti","WrappedComponent","this","nextProps","prevState","prevPropValue","labelProperty","DropDownContext","React","innerRef","rest","onKeyDown","theme","useContext","changeHandleOpening","changeMenuOpen","inputInFocus","handleOpening","menuOpen","onClickDropdownIndicator","aria-label","buttonType","className","get","icon","onClick","e","tabIndex","variant","BUTTON_VARIANT","DEFAULT","StyledSeparator","styled","props","Wrapper","headerPosition","string","hasSeparator","type","Content","scheduleUpdate","styleMenu","useEffect","data-testid","PropTypes","any","TriggerComponent","aggregatedClasses","inlineMenu","bounds","expandMenuToContainer","expandMenuOutsideContainer","zIndex","width","contentComponent","isOpen","placement","PopperPositions","preventOverflow","showArrow","triggerComponent","ref","getStyles","restInnerProps","c","aria-hidden","size","select","data","isScrolling","items","useTruncatedText","optionProps","innerProps","isArray","margin","children","checked","labelText","MultiSelectHeader","count","child","onSelectAll","selectAll","selectAllDisabled","DISABLED","orientation","position","HeaderWrapper","ContentWrapper","HeaderTitle","ActionButtons","StyledButton","array","createItemData","memoize","MenuList","selectProps","customMenuItemOptions","bottom","listRef","useRef","inside","setInside","remainingHeight","window","opts","handleKeyDown","itemSize","itemData","maxOptionsScreen","safeOptionLength","countOptions","o1","o2","calculatedHeight","RenderOption","item","scrollTo","onMouseLeave","itemCount","onScroll","useIsScrolling","bool","tooltipPlacement","Positions","innerPropsWithOutRemoval","onTouchEnd","onMouseDown","SingleValueLabel","isRequired","ValueContainer","valueContainerRef","cx","container","getValues","mOption","DSComboBox2","hideSelectedOptions","autoFocus","hasError","onFocus","onBlur","filterOption","createFilter","ignoreAccents","onInputKeyDown","onInputChange","isRtl","isFocused","undefined","isFreeSolo","formatCreateLabel","createOptionPosition","selectedValue","clearable","searchable","disabled","loading","menuIsOpen","components","customComponents","measureRef","contentRect","readOnly","returnValue","containerProps","componentsStyle","keepTypedValue","restPropsToCustomizeSelect","setSelectAll","setFocus","inputValue","setInputValue","setHandleOpening","setMenuOpen","isMultipleKeyPressed","setIsMultipleKeyPressed","prevOptions","usePrevious","optionsChanged","useShouldRecalculate","isEqual","SelectComponent","newValue","useCallback","isSelected","handleInputChange","action","handleFocus","removeDropdownIndicator","classNamePrefix","closeMenuOnSelect","Control","Menu","DropdownIndicator","ClearIndicator","GroupHeading","MultiValueLabel","MultiValueRemove","SingleValue","getOptionLabel","getOptionValue","isClearable","isDisabled","isSearchable","noOptionsMessage","onCreateOption","inputVal","newOption","createOption","prevValue","selectMeasure","styles","control","dropdownIndicator","groupHeading","clearIndicator","indicatorSeparator","singleValue","maxWidth","multiValueLabel","backgroundColor","multiValue","multiValueRemove","color","valueContainer","flexWrap","menu","longest","a","b","calculateWidth","tabSelectsValue","handleHoverRef","showAllOption","allOption","multipleFreeSoloProps","withSelectStringValueConverter","withContentRect"],"mappings":"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","file":"static/js/41.229bd0de.chunk.js","sourcesContent":["export const options = new Array(30).fill(null).map((el, i) => ({\n  label: `Option ${i}`,\n  value: `Option ${i}`,\n}));\n","import React, { useState } from 'react';\nimport { DSComboBox2 } from '@elliemae/ds-basic/form/ComboBox';\nimport { Grid } from '@elliemae/ds-basic/Grid';\n// DimSum Internal Use\nimport { options } from './options';\n\nexport default () => {\n  const [value, setValue] = useState(null);\n  const onChange = (val) => setValue(val);\n\n  return (\n    <Grid p=\"3rem\">\n      <div style={{ height: '85vh' }}>Pusher</div>\n      <DSComboBox2\n        // containerProps={{ id: 'my-custom-id' }}\n        // disabled={knobDisabled}\n        placeholder=\"Select\"\n        // menuIsOpen={knobMenuIsOpen}\n        // onBlur={onBlurAction}\n        onChange={onChange}\n        // onFocus={onFocusAction}\n        options={options}\n        // readOnly={knobReadOnly}\n        // searchable={knobSearchable}\n        value={value}\n        maxOptions={10}\n        // keepTypedValue={false} // TEMPORARY PROP\n      />\n    </Grid>\n  );\n};\n","/* eslint-disable react/display-name */\nimport React, { Component } from 'react';\n\nconst findOption = (options, valueProperty = 'value') => value => {\n  if (typeof value === 'object') return value;\n  const index = options.findIndex(option => option[valueProperty] === value);\n  return options[index];\n};\n\nconst getOptionFromValue = ({ value, options, valueProperty, isMulti }) => {\n  if (Array.isArray(value) && isMulti) {\n    return value.map(findOption(options, valueProperty));\n  }\n  return findOption(options, valueProperty)(value);\n};\n\nconst withSelectStringValueConverter = WrappedComponent =>\n  class extends Component {\n    static defaultProps = {\n      valueProperty: 'value',\n      labelProperty: 'label',\n    };\n\n    state = {};\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n      if (\n        typeof nextProps.value !== 'undefined' &&\n        nextProps.value !== prevState.prevPropValue\n      ) {\n        return {\n          prevPropValue: nextProps.value,\n          value: getOptionFromValue(nextProps),\n        };\n      }\n      return null;\n    }\n\n    render() {\n      const { value } = this.state;\n      return <WrappedComponent {...this.props} value={value} />;\n    }\n  };\n\nexport default withSelectStringValueConverter;\n","import React from 'react';\nexport const DropDownContext = React.createContext();\n","/* eslint-disable react/prop-types */\n/* eslint-disable import/no-cycle */\nimport React, { useContext } from 'react';\nimport { get } from 'lodash';\nimport ChevronSmallDown from '@elliemae/ds-icons/ChevronSmallDown';\nimport DSButton, { BUTTON_VARIANT } from '@elliemae/ds-basic/Button';\nimport { DropDownContext } from '../context';\n\nconst DropdownIndicator = ({\n  innerRef,\n  onKeyDown,\n  options,\n  theme,\n  ...rest\n}) => {\n  const {\n    changeHandleOpening,\n    changeMenuOpen,\n    inputInFocus,\n    handleOpening,\n    menuOpen,\n    onClickDropdownIndicator,\n  } = useContext(DropDownContext);\n\n  const handleOnClick = (e) => {\n    onClickDropdownIndicator(e);\n    changeMenuOpen(!menuOpen);\n    changeHandleOpening(!handleOpening);\n  };\n\n  const handleOnKeyDown = (e) => {\n    if (e.key === 'Enter') {\n      changeMenuOpen(!menuOpen);\n      e.preventDefault();\n    }\n  };\n\n  return (\n    <DSButton\n      aria-label=\"dropdown-indicator\"\n      buttonType=\"text\"\n      className={`dropdown-indicator ${\n        get(rest, 'selectProps.menuIsOpen', false) && !inputInFocus\n          ? 'active'\n          : ''\n      }`}\n      icon={<ChevronSmallDown />}\n      innerRef={innerRef}\n      onClick={handleOnClick}\n      onKeyDown={handleOnKeyDown}\n      tabIndex={-1}\n      variant={\n        get(rest, 'selectProps.menuIsOpen', false) && !inputInFocus\n          ? BUTTON_VARIANT.ACTIVE\n          : BUTTON_VARIANT.DEFAULT\n      }\n      {...rest}\n    />\n  );\n};\n\nexport default DropdownIndicator;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { components } from 'react-select';\nimport DSSeparator from '@elliemae/ds-basic/Separator';\nimport { getGroupHeaderPosition } from './utils';\n\nconst GroupHeading = props => {\n  const headerPosition = getGroupHeaderPosition(props.id);\n  const { hasSeparator } = props.selectProps.options[headerPosition];\n\n  return (\n    <Wrapper>\n      {hasSeparator && <StyledSeparator type=\"non-form\" />}\n      <components.GroupHeading {...props} />\n    </Wrapper>\n  );\n};\n\nconst StyledSeparator = styled(DSSeparator)`\n  width: auto;\n  margin: ${props => props.theme.space.xs};\n  margin-top: unset;\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport default GroupHeading;\n","export const getGroupHeaderPosition = string =>\n  string.match(/group(.*)/g)[0].match(/[0-9]/g)[0];\n","import React, { useEffect } from 'react';\nimport { components } from 'react-select';\nimport PropTypes from 'prop-types';\n\nconst Content = ({ scheduleUpdate, styleMenu, ...rest }) => {\n  useEffect(() => {\n    // trigger popper update on input change PUI-4069\n    scheduleUpdate();\n  }, [rest?.selectProps?.inputValue]);\n  return (\n    <div style={styleMenu} data-testid=\"combobox-menu\">\n      <components.Menu {...rest} />\n    </div>\n  );\n};\n\nContent.propTypes = {\n  scheduleUpdate: PropTypes.func,\n  styleMenu: PropTypes.any,\n};\n\nexport default Content;\n","/* eslint-disable react/prop-types */\n/* eslint-disable react/destructuring-assignment */\nimport React from 'react';\nimport { components } from 'react-select';\nimport DSPopper, { PopperPositions } from '@elliemae/ds-basic/Popper';\n\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\n// todo: the dropdown menu should be separated to a basic component and then import it here\n// use this for the moment but this needs to be changed\nimport Content from './Content';\n\nconst TriggerComponent = aggregatedClasses('div')('combobox-trigger', null);\n\nconst SelectMenu = React.memo((props) => {\n  const {\n    inlineMenu,\n    selectMeasure: { bounds },\n    expandMenuToContainer,\n    expandMenuOutsideContainer,\n    zIndex,\n  } = props.selectProps;\n\n  if (inlineMenu) {\n    return <components.Menu {...props} />;\n  }\n\n  const styleMenu = expandMenuToContainer ? { width: bounds.width } : {};\n  if (expandMenuOutsideContainer) {\n    styleMenu.width = 'auto';\n  }\n\n  return (\n    <DSPopper\n      contentComponent={<Content {...props} styleMenu={styleMenu} />}\n      isOpen\n      placement={PopperPositions.BOTTOM_START}\n      preventOverflow={<TriggerComponent />}\n      showArrow={false}\n      triggerComponent={<TriggerComponent />}\n      zIndex={zIndex}\n    />\n  );\n});\n\nexport default SelectMenu;\n","import React from 'react';\nimport { components } from 'react-select';\nimport { Reference } from 'react-popper';\n\nconst Control = props => (\n  <Reference>\n    {({ ref }) => (\n      <div ref={ref}>\n        <components.Control {...props} />\n      </div>\n    )}\n  </Reference>\n);\n\nexport default Control;\n","/* eslint-disable react/prop-types */\n/* eslint-disable react/destructuring-assignment,max-lines,react/display-name, react/require-default-props */\nimport React, { useContext } from 'react';\nimport { get } from 'lodash';\nimport CloseXsmall from '@elliemae/ds-icons/CloseXsmall';\nimport DSButton from '@elliemae/ds-basic/Button';\nimport { DropDownContext } from '../context';\n\nconst ClearIndicator = (props) => {\n  const {\n    getStyles,\n    innerProps: { ref, ...restInnerProps },\n    innerRef,\n  } = props;\n  const c = useContext(DropDownContext);\n\n  return (\n    <div\n      {...restInnerProps}\n      ref={ref}\n      aria-hidden=\"false\"\n      style={getStyles('clearIndicator', props)}\n    >\n      <DSButton\n        {...props}\n        aria-label=\"clear-indicator\"\n        buttonType=\"text\"\n        className=\"clear-indicator\"\n        icon={<CloseXsmall size=\"m\" />}\n        innerRef={innerRef}\n        onKeyDown={(e) => {\n          if (e.keyCode === 32 || e.keyCode === 13) {\n            e.preventDefault();\n            props.clearValue();\n            const select = get(c, 'select.current');\n            if (select && select.focus) select.focus();\n          }\n          if (props.onKeyDown) props.onKeyDown(e);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default ClearIndicator;\n","/* eslint-disable react/destructuring-assignment,max-lines,react/display-name, react/require-default-props */\nimport React from 'react';\nimport { get, isArray } from 'lodash';\nimport DSTruncatedTooltipText from '@elliemae/ds-basic/TruncatedTooltipText';\nimport DSSeparator from '@elliemae/ds-basic/Separator';\n\nconst CustomOption = ({ index, data, style, isScrolling }) => {\n  const {\n    items,\n    options: { useTruncatedText },\n  } = data;\n  const option = items[index];\n  const optionProps = {\n    ...option.props.innerProps,\n    style,\n    'data-testid': 'combobox-option',\n    onClick: e => {\n      e.stopPropagation();\n      if (option.props.innerProps.onClick) option.props.innerProps.onClick(e);\n    },\n  };\n\n  if (\n    useTruncatedText &&\n    !isScrolling &&\n    get(option, 'props.selectProps.menuIsOpen')\n  ) {\n    return React.cloneElement(\n      option,\n      {\n        ...option.props,\n        innerProps: optionProps,\n        tabIndex: 0,\n      },\n      <>\n        {option.props.data.hasSeparator &&\n          !isArray(option.props.data.options) && (\n            <DSSeparator margin=\"none\" type=\"non-form\" />\n          )}\n        <DSTruncatedTooltipText value={option.props.children} />\n      </>,\n    );\n  }\n\n  return React.cloneElement(\n    option,\n    {\n      ...option.props,\n      tabIndex: 0,\n      innerProps: optionProps,\n    },\n    <>\n      {option.props.data.hasSeparator &&\n        !isArray(option.props.data.options) && (\n          <DSSeparator margin=\"none\" type=\"non-form\" />\n        )}\n      {option.props.children}\n    </>,\n  );\n};\n\nexport default CustomOption;\n","/* eslint-disable react/destructuring-assignment,max-lines,react/display-name, react/require-default-props */\nimport React from 'react';\nimport DSTruncatedTooltipText from '@elliemae/ds-basic/TruncatedTooltipText';\nimport DSCheckbox from '@elliemae/ds-basic/form/Checkbox';\n\nconst CustomOptionMulti = ({ index, data, style, isScrolling }) => {\n  const {\n    items,\n    options: { useTruncatedText },\n  } = data;\n\n  const option = items[index];\n  const optionProps = {\n    ...option.props.innerProps,\n    style,\n    onClick: e => {\n      e.stopPropagation();\n      if (option.props.innerProps.onClick) option.props.innerProps.onClick(e);\n    },\n  };\n  if (useTruncatedText && !isScrolling) {\n    return React.cloneElement(\n      option,\n      {\n        ...option.props,\n        innerProps: optionProps,\n      },\n      <DSTruncatedTooltipText value={option.props.children} />,\n    );\n  }\n\n  return React.cloneElement(option, {\n    ...option.props,\n    innerProps: optionProps,\n    children: (\n      <div className=\"combobox-v2-option-multiple-container\">\n        <DSCheckbox\n          checked={option.props.isSelected}\n          labelText={option.props.children}\n        />\n      </div>\n    ),\n  });\n};\n\nexport default CustomOptionMulti;\n","/* eslint-disable import/no-cycle */\n/* eslint-disable react/destructuring-assignment,max-lines,react/display-name, react/require-default-props */\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport DSButton, { BUTTON_VARIANT } from '@elliemae/ds-basic/Button';\nimport DSSeparator from '@elliemae/ds-basic/Separator';\nimport { DropDownContext } from '../context';\n\nconst MultiSelectHeader = (props) => {\n  const count = props.children.filter((child) => child.props.isSelected).length;\n  const { onSelectAll, selectAll, selectAllDisabled } = useContext(\n    DropDownContext,\n  );\n\n  return (\n    <HeaderWrapper>\n      <ContentWrapper>\n        <HeaderTitle>{`${count} selected`}</HeaderTitle>\n        {!selectAllDisabled && (\n          <ActionButtons>\n            <StyledButton\n              buttonType=\"text\"\n              labelText=\"All\"\n              size=\"s\"\n              onClick={() => onSelectAll(true)}\n              variant={selectAll && BUTTON_VARIANT.DISABLED}\n            />\n            <StyledSeparator\n              orientation=\"vertical\"\n              position=\"center\"\n              type=\"group-level\"\n              margin=\"none\"\n            />\n            <StyledButton\n              buttonType=\"text\"\n              labelText=\"Clear\"\n              size=\"s\"\n              onClick={() => onSelectAll(false)}\n              variant={!selectAll && count === 0 && BUTTON_VARIANT.DISABLED}\n            />\n          </ActionButtons>\n        )}\n      </ContentWrapper>\n      <DSSeparator position=\"center\" type=\"non-form\" margin=\"none\" />\n    </HeaderWrapper>\n  );\n};\n\nconst HeaderWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 0 ${(props) => props.theme.space.xs};\n`;\n\nconst ContentWrapper = styled.div`\n  display: flex;\n  align-items: flex-end;\n  justify-content: space-between;\n  height: ${(props) => props.theme.space.s};\n  padding-bottom: 4px;\n`;\n\nconst HeaderTitle = styled.span`\n  color: ${(props) => props.theme.colors.neutral[500]};\n`;\n\nconst ActionButtons = styled.div`\n  display: inline-flex;\n  color: ${(props) => props.theme.colors.neutral[500]};\n`;\n\nconst StyledSeparator = styled(DSSeparator)`\n  height: auto;\n  width: auto;\n`;\n\nconst StyledButton = styled(DSButton)`\n  padding: 0 ${(props) => props.theme.space.xxs};\n`;\n\nMultiSelectHeader.propTypes = {\n  children: PropTypes.array,\n};\n\nexport default MultiSelectHeader;\n","/* eslint-disable max-statements */\n/* eslint-disable complexity */\nimport React, { useRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { components } from 'react-select';\nimport { FixedSizeList as List } from 'react-window';\nimport memoize from 'memoize-one';\nimport CustomOption from './CustomOption';\nimport CustomOptionMulti from './CustomOptionMulti';\nimport MultiSelectHeader from './MultiSelectHeader';\n\nconst createItemData = memoize((items, options) => ({\n  items,\n  options,\n}));\n\nconst scrollTo = (listRef, type) => {\n  if (listRef && listRef.current && listRef.current.props) {\n    const { items } = listRef.current.props.itemData;\n    const index = items.findIndex((item) => item.props.isFocused);\n    listRef.current.scrollToItem(index, type);\n  }\n};\n\nconst MenuList = (props) => {\n  const { children: options, selectProps, isMulti } = props;\n  const {\n    customMenuItemOptions,\n    selectMeasure: {\n      bounds: { bottom },\n    },\n  } = selectProps;\n  const listRef = useRef(null);\n  const [inside, setInside] = useState(false);\n  const remainingHeight = window.innerHeight - bottom - 10;\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  });\n\n  const handleKeyDown = () => setInside(false);\n\n  const countOptions = (opts) => {\n    let count;\n    if (opts.length && opts[0].type.name === 'Group') {\n      count = opts.reduce(\n        (o1, o2) => o1.props.options.length + o2.props.options.length,\n      );\n    } else {\n      count = opts.length;\n    }\n    return count;\n  };\n\n  const { itemSize = 35, maxOptions } = customMenuItemOptions;\n  const itemData = createItemData(options, customMenuItemOptions);\n  const maxOptionsScreen = maxOptions;\n  const safeOptionLength = countOptions(options) || 1;\n  const calculatedHeight =\n    itemSize *\n    (safeOptionLength < maxOptionsScreen || !maxOptionsScreen\n      ? safeOptionLength\n      : maxOptionsScreen);\n\n  const RenderOption = !isMulti ? CustomOption : CustomOptionMulti;\n\n  let height;\n  if (maxOptions) {\n    height = calculatedHeight;\n  } else if (remainingHeight > calculatedHeight) {\n    height = calculatedHeight;\n  } else {\n    height = remainingHeight;\n  }\n\n  if (listRef && listRef.current && !inside) {\n    scrollTo(listRef); // use autoScroll\n  }\n\n  if (!options.length) return <components.MenuList {...props} />;\n\n  return (\n    <div data-testid=\"combobox-menu-list\" onMouseLeave={() => setInside(false)}>\n      {isMulti && <MultiSelectHeader {...props} />}\n      <List\n        ref={listRef}\n        className={`combobox-menu-list ${\n          isMulti && 'combobox-menu-list-is-multi'\n        }`}\n        height={height}\n        itemCount={options.length}\n        itemData={itemData}\n        itemSize={itemSize}\n        onScroll={() => setInside(true)}\n        useIsScrolling\n      >\n        {RenderOption}\n      </List>\n    </div>\n  );\n};\n\nMenuList.propTypes = {\n  children: PropTypes.arrayOf(PropTypes.element),\n  selectProps: PropTypes.object,\n  isMulti: PropTypes.bool,\n};\n\nexport default MenuList;\n","import React from 'react';\nimport DSTruncatedTooltipText from '@elliemae/ds-basic/TruncatedTooltipText';\nimport { PopperPositions as Positions } from '@elliemae/ds-basic/Popper';\n\nfunction MultiValueLabel({ children }) {\n  return (\n    <DSTruncatedTooltipText tooltipPlacement={Positions.TOP} value={children} />\n  );\n}\n\nexport default MultiValueLabel;\n","import React from 'react';\nimport { components } from 'react-select';\n\nfunction MultiValueRemove({ innerProps, ...rest }) {\n  const innerPropsWithOutRemoval = {\n    ...innerProps,\n    onClick: () => {},\n    onTouchEnd: () => {},\n    onMouseDown: () => {},\n  };\n  return (\n    <components.MultiValueRemove\n      {...rest}\n      innerProps={innerPropsWithOutRemoval}\n    >\n      ,\n    </components.MultiValueRemove>\n  );\n}\n\nexport default MultiValueRemove;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DSTruncatedTooltipText from '@elliemae/ds-basic/TruncatedTooltipText';\nimport { PopperPositions as Positions } from '@elliemae/ds-basic/Popper';\n\nfunction SingleValueLabel({ children }) {\n  return (\n    <DSTruncatedTooltipText tooltipPlacement={Positions.TOP} value={children} />\n  );\n}\n\nSingleValueLabel.propTypes = {\n  children: PropTypes.string.isRequired,\n};\nexport default SingleValueLabel;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { DSCircularProgressIndicator } from '@elliemae/ds-basic/CircularProgressIndicator';\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 12px;\n`;\n\nconst LoadingIndicator = () => (\n  <Wrapper data-testid=\"ds-combobox_loading-indicator\">\n    <DSCircularProgressIndicator size=\"m\" />\n  </Wrapper>\n);\n\nexport default LoadingIndicator;\n","/* eslint-disable react/prop-types */\n/* eslint-disable jsx-a11y/no-noninteractive-tabindex */\nimport React, { useContext, useRef } from 'react';\nimport { components } from 'react-select';\nimport { cx } from '@elliemae/ds-utilities/utils';\nimport { DropDownContext } from '../context';\n\nexport function ValueContainer({ children, ...rest }) {\n  const valueContainerRef = useRef(null);\n  const c = useContext(DropDownContext);\n  return (\n    <div\n      ref={valueContainerRef}\n      className={cx(\n        'combobox-v2-value-container',\n        c.inputInFocus && 'in-focus',\n        c.value && c.clearable && 'has-value',\n        c.removeDropdownIndicator && 'dropdown-indicator-removed',\n      )}\n    >\n      <components.ValueContainer {...rest}>\n        {children}\n      </components.ValueContainer>\n    </div>\n  );\n}\n\nexport default ValueContainer;\n","/* eslint-disable spaced-comment */\n/* eslint-disable no-else-return */\n/* eslint-disable max-statements */\n/* eslint-disable no-confusing-arrow */\n/* eslint-disable import/no-cycle, max-lines */\nimport React, { useCallback, useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Select, { Creatable, createFilter } from 'react-select';\nimport { Manager } from 'react-popper';\nimport { withContentRect } from 'react-measure';\nimport { cx, isEqual } from '@elliemae/ds-utilities/utils';\nimport theme from '@elliemae/ds-system/theme';\nimport usePrevious from '@elliemae/ds-utilities/hooks/usePrevious';\nimport useShouldRecalculate from '@elliemae/ds-utilities/hooks/useShouldRecalculate';\n\nimport { TooltipTextProvider } from '@elliemae/ds-basic/TruncatedTooltipText';\nimport withSelectStringValueConverter from '../v1/withSelectStringValueConverter';\nimport DropdownIndicator from './components/DropdownIndicator';\nimport GroupHeading from './components/GroupHeading';\nimport SelectMenu from './components/SelectMenu';\nimport Control from './components/Control';\nimport ClearIndicator from './components/ClearIndicator';\nimport MenuList from './components/MenuList';\nimport MultiValueLabel from './components/MultiValueLabel';\nimport MultiValueRemove from './components/MultiValueRemove';\nimport SingleValueLabel from './components/SingleValueLabel';\nimport LoadingIndicator from './components/LoadingIndicator';\nimport { calculateWidth } from './components/calculateWidth';\nimport { ValueContainer } from './components/ValueContainer';\nimport { DropDownContext } from './context';\n\nconst blockName = 'em-ds-combobox';\nconst container = `${blockName}-container`;\nconst getValues = (option, isMulti, valueProperty) => {\n  if (!option) return null;\n  return isMulti\n    ? option.map((mOption) => mOption[valueProperty])\n    : option[valueProperty];\n};\nconst createOption = (label, value) => ({ label, value });\n\nconst DSComboBox2 = ({\n  hideSelectedOptions = false,\n  autoFocus = false,\n  className = '',\n  hasError = false,\n  onFocus = () => null,\n  onBlur = () => null,\n  onChange = () => null,\n  // onKeyDown = () => null,\n  filterOption = createFilter({ ignoreAccents: false }), // this fix performance issue\n  onClickDropdownIndicator = () => null,\n  onInputKeyDown = () => null,\n  onInputChange = () => null,\n  isRtl = false,\n  isFocused = undefined,\n  isMulti = false,\n  isFreeSolo,\n  selectAllDisabled = false,\n  formatCreateLabel,\n  createOptionPosition,\n  value: selectedValue = null,\n  options = [],\n  clearable = false,\n  searchable = true,\n  disabled = false,\n  placeholder = '',\n  valueProperty = 'value',\n  labelProperty = 'label',\n  loading = false,\n  menuIsOpen = false,\n  inlineMenu = false,\n  components: customComponents = {},\n  measureRef,\n  contentRect,\n  readOnly = false,\n  returnValue = true,\n  expandMenuToContainer = true,\n  expandMenuOutsideContainer = false,\n  customMenuItemOptions = {\n    useTruncatedText: false,\n    itemSize: 35,\n  },\n  containerProps = {},\n  maxOptions,\n  zIndex = 11,\n  componentsStyle,\n  keepTypedValue = true, //TEMPORARY PROP UNTIL WE HAVE THIS FUNCTIONALITY IN SINGLE FREE SOLO\n  ...restPropsToCustomizeSelect\n}) => {\n  const select = useRef();\n  const [selectAll, setSelectAll] = useState(false);\n  const [inputInFocus, setFocus] = useState(false);\n  const [value, setValue] = useState(selectedValue);\n  const [inputValue, setInputValue] = useState('');\n  const [handleOpening, setHandleOpening] = useState(false);\n  const [menuOpen, setMenuOpen] = useState(menuIsOpen);\n  const [isMultipleKeyPressed, setIsMultipleKeyPressed] = useState(false);\n  const prevOptions = usePrevious(options);\n  const optionsChanged = useShouldRecalculate(isEqual(prevOptions, options));\n  const SelectComponent = isFreeSolo ? Creatable : Select;\n\n  useEffect(() => {\n    setValue(selectedValue);\n  }, [selectedValue]);\n\n  useEffect(() => {\n    if (value) {\n      const newValue = options.find((option) => value.value === option.value);\n      setValue(newValue);\n    }\n  }, [optionsChanged]);\n\n  const onSelectAll = useCallback((isSelected) => {\n    setSelectAll(isSelected);\n    if (isSelected) {\n      onChange(getValues(options, isSelected, valueProperty));\n    } else {\n      onChange(getValues());\n    }\n  }, []);\n\n  const handleInputChange = useCallback((val, action) => {\n    setInputValue(val);\n    if (action.action === 'input-change' && !isMulti) {\n      setMenuOpen(true);\n      if (!inlineMenu && keepTypedValue) {\n        onChange({ value: val, label: val }, action);\n      }\n    }\n    if (val) onInputChange(val, action);\n  }, []);\n\n  const handleOnKeyDown = (e) => {\n    if (e.key === 'Backspace' && !e.target.value && value) {\n      onChange('', { action: 'input-clear' }); // this clears the input\n    }\n    if (e.key === 'Control') setIsMultipleKeyPressed(true);\n    // If Ctrl + Enter are pressed, focus is set to the input and the menu closes\n    if (isMultipleKeyPressed && e.key === 'Enter') {\n      setFocus(true);\n      setMenuOpen(false);\n      setIsMultipleKeyPressed(false);\n      e.preventDefault();\n    }\n  };\n\n  const handleOnChange = (newValue, action) => {\n    setMenuOpen(isMulti);\n    if (!isMulti) select.current.blur();\n    if (returnValue) {\n      if (isFreeSolo) return onChange(newValue, action);\n      return onChange(getValues(newValue, isMulti, valueProperty), action);\n    }\n    if (isMulti && selectAll) return onChange(options, action);\n    return onChange(newValue, action);\n  };\n\n  const handleCreateNewOption = (inputVal) => {\n    const newOption = createOption(inputVal, inputVal);\n    const prevValue = Array.isArray(value) ? value : [];\n    const newValue = isMulti ? [...prevValue, newOption] : newOption;\n    if (!isMulti) select.current.blur();\n    setMenuOpen(isMulti);\n    onChange(newValue);\n  };\n\n  const handleFocus = useCallback((e) => {\n    setFocus(true);\n    if (!inlineMenu) setMenuOpen(true);\n    onFocus(e);\n    setHandleOpening(true);\n  }, []);\n\n  const handleBlur = (e) => {\n    setFocus(false);\n    if (!inlineMenu) setMenuOpen(false);\n    onBlur(e, value);\n    setHandleOpening(false);\n  };\n\n  return (\n    <TooltipTextProvider>\n      <DropDownContext.Provider\n        value={{\n          inputInFocus,\n          value,\n          isMulti,\n          menuOpen,\n          handleOpening,\n          selectAll,\n          selectAllDisabled,\n          changeHandleOpening: (isOpen) => setHandleOpening(isOpen),\n          changeMenuOpen: (isOpen) => setMenuOpen(isOpen),\n          onClickDropdownIndicator,\n          onSelectAll: (val) => onSelectAll(val),\n          clearable,\n          removeDropdownIndicator: customComponents.DropdownIndicator === null,\n          select,\n        }}\n      >\n        <Manager>\n          <div\n            ref={measureRef}\n            className={cx(\n              `${container}`,\n              inputInFocus && 'in-focus',\n              hasError && 'with-error',\n              disabled && 'is-disabled',\n              className,\n            )}\n            data-testid=\"combobox\"\n            {...containerProps}\n          >\n            <SelectComponent\n              ref={select}\n              autoFocus={autoFocus}\n              classNamePrefix={blockName}\n              // If it is multiselect let the menu open on select.\n              closeMenuOnSelect={!isMulti}\n              components={{\n                Control,\n                // IndicatorSeparator,\n                Menu: SelectMenu,\n                DropdownIndicator,\n                ClearIndicator,\n                GroupHeading,\n                MultiValueLabel,\n                MultiValueRemove,\n                SingleValue: SingleValueLabel,\n                MenuList,\n                ValueContainer,\n                ...customComponents,\n              }}\n              customMenuItemOptions={{ maxOptions, ...customMenuItemOptions }}\n              expandMenuOutsideContainer={expandMenuOutsideContainer}\n              expandMenuToContainer={expandMenuToContainer}\n              filterOption={filterOption}\n              getOptionLabel={(option) => option[labelProperty]}\n              getOptionValue={(option) => option[valueProperty]}\n              formatCreateLabel={formatCreateLabel}\n              createOptionPosition={createOptionPosition}\n              hideSelectedOptions={hideSelectedOptions}\n              inlineMenu={inlineMenu}\n              isClearable={clearable}\n              isDisabled={disabled || readOnly}\n              isFocused={isFocused}\n              isMulti={isMulti}\n              isRtl={isRtl}\n              isSearchable={readOnly ? false : searchable}\n              menuIsOpen={menuOpen}\n              noOptionsMessage={() =>\n                loading ? <LoadingIndicator /> : 'No matches found'\n              }\n              onBlur={handleBlur}\n              onChange={handleOnChange}\n              onCreateOption={handleCreateNewOption}\n              onFocus={handleFocus}\n              onInputChange={handleInputChange}\n              onInputKeyDown={onInputKeyDown}\n              onKeyDown={handleOnKeyDown}\n              options={loading ? [] : options}\n              placeholder={placeholder}\n              selectMeasure={contentRect}\n              styles={{\n                control: () => null,\n                option: () => null,\n                dropdownIndicator: () => null,\n                groupHeading: (provided) => ({ ...provided }),\n                clearIndicator: () => null,\n                placeholder: () => null,\n                indicatorSeparator: () => null,\n                singleValue: (provided) => ({ ...provided, maxWidth: '90%' }),\n                multiValueLabel: (provided) => ({\n                  ...provided,\n                  backgroundColor: 'transparent',\n                }),\n                multiValue: (provided) => ({\n                  ...provided,\n                  backgroundColor: 'transparent',\n                }),\n                multiValueRemove: (provided) => ({\n                  ...provided,\n                  '&:hover': {\n                    backgroundColor: 'transparent',\n                    color: theme.colors.neutral[800],\n                  },\n                }),\n                valueContainer: (provided) => ({\n                  ...provided,\n                  flexWrap: 'nowrap',\n                }),\n                menu: () => {\n                  if (expandMenuOutsideContainer) {\n                    const width = calculateWidth(options);\n                    if (!width) return null;\n                    return { width: `${width}px` };\n                  }\n                  if (loading) return { height: '72px' };\n                  return null;\n                },\n                ...componentsStyle,\n              }}\n              tabSelectsValue={false}\n              value={value}\n              inputValue={inputValue}\n              zIndex={zIndex}\n              {...restPropsToCustomizeSelect}\n            />\n          </div>\n        </Manager>\n      </DropDownContext.Provider>\n    </TooltipTextProvider>\n  );\n};\n\nDSComboBox2.propTypes = {\n  containerProps: PropTypes.object,\n  handleHoverRef: PropTypes.func,\n  /**\n   * Whether the combo box uses auto focus or not\n   */\n  autoFocus: PropTypes.bool,\n  className: PropTypes.string,\n  /**\n   * Whether the combo box has error or not\n   */\n  hasError: PropTypes.bool,\n  /**\n   * Allows a function that is triggered once the combo box is focused\n   */\n  onFocus: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the combo box loses focus\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the combo box changes\n   */\n  onChange: PropTypes.func,\n  /**\n   * Allows a function that is triggered once a key is being pressed\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the combo box input key down\n   */\n  onInputKeyDown: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the combo box input changes\n   */\n  onInputChange: PropTypes.func,\n  /**\n   * Whether the combo box is rtl or not  //ASK\n   */\n  isRtl: PropTypes.bool,\n  /**\n   * Whether the combo box is focused or not\n   */\n  isFocused: PropTypes.bool,\n  /**\n   * Whether the select all/clear buttons are enabled or not\n   */\n  selectAllDisabled: PropTypes.bool,\n  /**\n   * Whether the combo box is multi or not\n   */\n  isMulti: PropTypes.bool,\n  inputValue: PropTypes.string,\n  showAllOption: PropTypes.bool,\n  allOption: PropTypes.shape({\n    label: PropTypes.string,\n    value: PropTypes.string,\n  }),\n  /**\n   * Value that the combo box has as default\n   */\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.object,\n  ]),\n  /**\n   * Value that the combo box has as default\n   */\n  options: PropTypes.array,\n  /**\n   * Whether the combo box is clearable or not\n   */\n  clearable: PropTypes.bool,\n  /**\n   * Whether the combo box is searchable or not. Set to false makes the input non-editable\n   */\n  searchable: PropTypes.bool,\n  /**\n   * Whether the combo box is disabled or not\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Placeholder for the combo box\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Displays a Loading Indicator in the menu\n   */\n  loading: PropTypes.bool,\n  valueProperty: PropTypes.string,\n  labelProperty: PropTypes.string,\n  /**\n   * Whether the combo box menu is open or not\n   */\n  menuIsOpen: PropTypes.bool,\n  /**\n   * Whether to show the combo box menu inline or not\n   */\n  inlineMenu: PropTypes.bool,\n  /**\n   * Message to show once there aren't any options\n   */\n  noOptionsMessage: PropTypes.func,\n  /**\n   * Components you can add to the combo box\n   */\n  measureRef: PropTypes.func,\n  /**\n   * Whether the combo box is read only or not\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Whether the combo box can be expanded the menu to container or not\n   */\n  expandMenuToContainer: PropTypes.bool,\n  /**\n   * Allow have options larger than his container\n   */\n  expandMenuOutsideContainer: PropTypes.bool,\n  /**\n   * Custom combo box menu item options\n   */\n  customMenuItemOptions: PropTypes.object,\n  /**\n   * Props to enable multiple free solo combobox\n   */\n  multipleFreeSoloProps: PropTypes.object,\n  /**\n   * Whether the combo box is has value to return or not\n   */\n  returnValue: PropTypes.bool,\n  hideSelectedOptions: PropTypes.bool,\n  maxOptions: PropTypes.number,\n  /**\n   * Custom method to filter whether an option should be displayed in the menu\n   */\n  filterOption: PropTypes.func,\n  isFreeSolo: PropTypes.bool,\n  formatCreateLabel: PropTypes.func,\n  createOptionPosition: PropTypes.string,\n  onClickDropdownIndicator: PropTypes.func,\n  /**\n   * Object with custom components for react-select\n   */\n  components: PropTypes.object,\n  componentsStyle: PropTypes.object,\n  contentRect: PropTypes.object,\n  zIndex: PropTypes.number,\n  keepTypedValue: PropTypes.bool,\n};\n\nexport default withSelectStringValueConverter(\n  withContentRect('bounds')(DSComboBox2),\n);\n","const letterFactor = 5.7;\nconst fixedSpace = 45;\nexport function calculateWidth(options) {\n  const longest = options.reduce((a, b) => {\n    if (a && a.label && b && b.label)\n      return a.label.length > b.label.length ? a : b;\n    return 0;\n  });\n  if (longest && longest.label && longest.label.length) {\n    // if (longest.label.length > fixedSpace) return fixedSpace * letterFactor\n    return longest.label.length * letterFactor + fixedSpace;\n  }\n  return 0;\n}\n"],"sourceRoot":""}