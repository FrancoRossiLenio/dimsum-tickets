{"version":3,"sources":["../../../src/form/ComboBox/v1/withSelectStringValueConverter.js","../../../src/utils/prop-types.js","../../../src/form/ComboBox/v1/components/Control.js","../../../src/form/ComboBox/v1/components/DropdownIndicator.js","../../../src/form/ComboBox/v1/components/SelectMenu.js","../../../src/form/ComboBox/v1/components/ClearIndicator.js","../../../src/form/ComboBox/v1/components/CustomOption.js","../../../src/form/ComboBox/v1/components/CustomOptionMulti.js","../../../src/form/ComboBox/v1/components/MultiSelectHeader.js","../../../src/form/ComboBox/v1/components/MenuList.js","../../../src/form/ComboBox/v1/components/MultiValueLabel.js","../../../src/form/ComboBox/v1/components/MultiValueRemove.js","../../../src/form/ComboBox/v1/components/SingleValueLabel.js","../../../src/form/ComboBox/v1/components/ValueContainer.js","../../../src/form/ComboBox/v1/DSComboBox.js","../../../src/form/ComboBox/v1/components/calculateWidth.js","../../../src/form/ComboBox/v2/context.js","../../../src/form/ComboBox/v2/components/DropdownIndicator.js","../../../src/form/ComboBox/v2/components/GroupHeading.js","../../../src/form/ComboBox/v2/components/utils.js","../../../src/form/ComboBox/v2/components/Content.js","../../../src/form/ComboBox/v2/components/SelectMenu.js","../../../src/form/ComboBox/v2/components/Control.js","../../../src/form/ComboBox/v2/components/ClearIndicator.js","../../../src/form/ComboBox/v2/components/CustomOption.js","../../../src/form/ComboBox/v2/components/CustomOptionMulti.js","../../../src/form/ComboBox/v2/components/MultiSelectHeader.js","../../../src/form/ComboBox/v2/components/MenuList.js","../../../src/form/ComboBox/v2/components/MultiValueLabel.js","../../../src/form/ComboBox/v2/components/MultiValueRemove.js","../../../src/form/ComboBox/v2/components/SingleValueLabel.js","../../../src/form/ComboBox/v2/components/LoadingIndicator.js","../../../src/form/ComboBox/v2/components/ValueContainer.js","../../../src/form/ComboBox/v2/Combobox.js","../../../src/form/ComboBox/v2/components/calculateWidth.js","DataGrid/editableColumns.js","../../../src/MoreOptionsVert.js","../../../src/CheckableGroup.js","../../../src/Search.js","../../../../../src/form/SearchBox/withSearchable.js","../../../../src/Menu/MenuContext.js","../../../../src/Menu/VirtualMenuList.js","../../../../../src/Menu/utils/useHeightByAmountOfItems.js","../../../../../src/Menu/MenuItems/SearchableGroup.js","../../../../../src/Menu/MenuItems/Separator.js","../../../src/Checkmark.js","../../../../../src/Menu/MenuItems/CheckboxGroup.js","../../../../../src/Menu/MenuItems/RadioGroup.js","../../../src/ChevronSmallRight.js","../../../../../src/form/TextBox/DSTextBox.js","../../../src/Menu/MenuItems/SelectionGroup.js","../../../src/Menu/MenuItems/MenuItemCheckbox.js","../../../src/Menu/MenuItems/menuItemFactory.js","../../../src/Menu/MenuItems/MenuItem.js","../../../src/Menu/MenuItems/MenuItemCheckable.js","../../../src/Menu/MenuItems/MenuItemRadio.js","../../../src/Menu/Menu.js","../../../src/Menu/MenuItems/SubMenu.js","../../../../../src/form/SearchBox/SearchBoxImpl.js","../../../../../src/form/SearchBox/DSSearchBox.js","../../../../src/FocusGroup/focusGroupManagerHoc.js"],"names":["findOption","options","valueProperty","value","index","option","getOptionFromValue","isMulti","Array","withSelectStringValueConverter","WrappedComponent","this","nextProps","prevState","prevPropValue","labelProperty","COMBOBOX_VARIANT","comboBoxVariants","Control","props","ref","DropdownIndicator","innerRef","onKeyDown","rest","aria-label","buttonType","className","icon","SelectMenu","inlineMenu","bounds","expandMenuToContainer","expandMenuOutsideContainer","zIndex","styleMenu","width","containerProps","isOpen","modifiers","preventOverflow","enabled","padding","boundariesElement","placement","PopperPositions","BOTTOM_START","style","cx","visible","ClearIndicator","getStyles","aria-hidden","size","e","CustomOption","data","isScrolling","items","useTruncatedText","optionProps","onClick","get","innerProps","children","CustomOptionMulti","allSelected","checked","labelText","MultiSelectHeader","count","child","createItemData","memoize","scrollToKeyword","debounce","listRef","type","item","MenuList","useRef","useState","inside","setInside","handleKeyDown","useEffect","window","selectProps","customMenuItemOptions","itemSize","itemData","safeOptionLength","height","RenderOption","onMouseLeave","itemCount","onScroll","useIsScrolling","MultiValueLabel","tooltipPlacement","Positions","MultiValueRemove","SingleValueLabel","PropTypes","isRequired","ValueContainer","ThemeConstants","allOption","label","getValues","mOption","DSComboBox","undefined","isHover","focus","React","handleHoverRef","throttle","hideSelectedOptions","autoFocus","hasError","onFocus","onBlur","onChange","filterOption","onClickDropdownIndicator","onInputKeyDown","onInputChange","isRtl","isFocused","showAllOption","clearable","searchable","disabled","placeholder","menuIsOpen","noOptionsMessage","customComponents","measureRef","contentRect","readOnly","returnValue","variant","restPropsToCustomizeSelect","internalOptions","internalValue","onMouseEnter","classNamePrefix","components","Menu","onMouseOverCapture","onKeyDownIndicator","onKeyDownClear","SingleValue","getOptionLabel","getOptionValue","isClearable","isDisabled","isSearchable","op","selectMeasure","styles","control","menu","longest","a","b","calculateWidth","dropdownIndicator","clearIndicator","indicatorSeparator","multiValue","base","background","minWidth","Component","inputValue","string","loading","maxOptions","number","withContentRect","DropDownContext","theme","useContext","changeHandleOpening","changeMenuOpen","inputInFocus","handleOpening","menuOpen","tabIndex","BUTTON_VARIANT","DEFAULT","GroupHeading","headerPosition","hasSeparator","StyledSeparator","styled","Wrapper","Content","scheduleUpdate","data-testid","any","TriggerComponent","aggregatedClasses","contentComponent","showArrow","triggerComponent","restInnerProps","c","select","isArray","margin","onSelectAll","selectAll","selectAllDisabled","DISABLED","orientation","position","HeaderWrapper","ContentWrapper","HeaderTitle","ActionButtons","StyledButton","array","bottom","remainingHeight","opts","maxOptionsScreen","countOptions","o1","o2","calculatedHeight","scrollTo","innerPropsWithOutRemoval","onTouchEnd","onMouseDown","bool","LoadingIndicator","valueContainerRef","container","DSComboBox2","createFilter","ignoreAccents","isFreeSolo","formatCreateLabel","createOptionPosition","selectedValue","componentsStyle","keepTypedValue","setSelectAll","setFocus","setValue","setInputValue","setHandleOpening","setMenuOpen","isMultipleKeyPressed","setIsMultipleKeyPressed","prevOptions","usePrevious","optionsChanged","useShouldRecalculate","isEqual","SelectComponent","newValue","useCallback","isSelected","handleInputChange","action","val","handleFocus","removeDropdownIndicator","closeMenuOnSelect","onCreateOption","inputVal","newOption","createOption","prevValue","groupHeading","singleValue","maxWidth","multiValueLabel","backgroundColor","multiValueRemove","color","valueContainer","flexWrap","tabSelectsValue","multipleFreeSoloProps","property","editable","sortable","resizable","customEditor","onValue","rowData","createIcon","paths","useCheckableGroup","activeProp","active","multi","onCheck","useDerivedStateFromProps","setActive","handleCheck","target","prevActive","nextActive","addOrRemove","cloneElement","runAll","CheckableGroup","func","Searchable","onKeyUp","searchOnEnter","key","onSearch","clearOnSearch","setState","query","buttonRef","MenuItem","itemHeight","amountItemsInWindow","computedListHeight","useHeightByAmountOfItems","amountItems","useMemo","itemsLength","calculateHeight","SearchBoxWrapper","NoOptionsWrapper","SearchableGroup","searchTerm","searchTermProp","noOptionsText","focusOnOpen","searchRef","setSearchTerm","setTimeout","filteredChildren","showIcon","focusGroupManagerHoc","Li","Title","title","showSeparator","CheckboxGroup","RadioGroup","DSTextBox","maxLength","minLength","fluidWidth","min","max","leftComponent","rightComponent","required","otherProps","role","noop","SelectionGroup","onSelect","renderedItems","menuItemFactory","name","decoratedGroupChildren","MenuItemCheckbox","leftAddon","itemTypes","separator","menuitem","radio","checkbox","submenu","fallback","defaultItem","itemsObject","parsedType","renderMenuItems","factory","isFunction","ItemComponent","Addon","empty","fixedItem","renderAddon","addon","addonId","classProps","renderAddons","addons","disabledAddonInactive","customRenderer","calculateSize","length","as","rightAddon","noAddon","maxOption","menuCxt","useFocusGroupItem","closeMenu","wrapperProps","omit","id","mergeRefs","MouseEvent","view","bubbles","cancelable","MenuItemCheckable","checkIcon","checkableProps","useCheckable","checkAddon","MenuItemRadio","element","MenuComponent","menuComboBox","isChildOfType","DSMenu","MenuTag","animated","ul","onClickOutside","responsiveHeight","menuRef","focusFirst","useHiddenTransition","hiddenProps","nextChildren","forceLeftAddon","useOnClickOutside","overflowY","maxHeight","WrappedMenu","loop","SubMenu","interactionType","subitems","rightAddonType","itemRef","useHiddenController","interaction","onShow","onHide","focusItemByNode","hoverHandlers","leftIcon","handleShowSubItemsWithMouse","focusKeyBindings","ArrowLeft","onExitFocusGroup","onOpen","opening","SearchBoxImpl","disableButton","iconSize","withSearchable","DSSearchBox","searchIcon","onFocusPrevGroup","keyBindings"],"mappings":"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","file":"static/js/26.3b3106b4.chunk.js","sourcesContent":["/* eslint-disable react/display-name */\nimport React, { Component } from 'react';\n\nconst findOption = (options, valueProperty = 'value') => value => {\n  if (typeof value === 'object') return value;\n  const index = options.findIndex(option => option[valueProperty] === value);\n  return options[index];\n};\n\nconst getOptionFromValue = ({ value, options, valueProperty, isMulti }) => {\n  if (Array.isArray(value) && isMulti) {\n    return value.map(findOption(options, valueProperty));\n  }\n  return findOption(options, valueProperty)(value);\n};\n\nconst withSelectStringValueConverter = WrappedComponent =>\n  class extends Component {\n    static defaultProps = {\n      valueProperty: 'value',\n      labelProperty: 'label',\n    };\n\n    state = {};\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n      if (\n        typeof nextProps.value !== 'undefined' &&\n        nextProps.value !== prevState.prevPropValue\n      ) {\n        return {\n          prevPropValue: nextProps.value,\n          value: getOptionFromValue(nextProps),\n        };\n      }\n      return null;\n    }\n\n    render() {\n      const { value } = this.state;\n      return <WrappedComponent {...this.props} value={value} />;\n    }\n  };\n\nexport default withSelectStringValueConverter;\n","export const BUTTON_TYPE = {\n  PRIMARY: 'primary',\n  SECONDARY: 'secondary',\n  TEXT: 'text',\n  LINK: 'link',\n};\n\nexport const buttonTypes = ['primary', 'secondary', 'text', 'link'];\n\nexport const BUTTON_SIZE = {\n  S: 's',\n  M: 'm',\n  L: 'l',\n};\n\nexport const BUTTON_INTENT = {\n  DANGER: 'danger',\n  SUCCESS: 'success',\n  WARNING: 'warning',\n  INFO: 'info',\n};\n\nexport const BUTTON_VARIANT = {\n  DEFAULT: 'variant-default',\n  FOCUS: 'variant-focus',\n  ACTIVE: 'variant-active',\n  DISABLED: 'variant-disabled',\n  HOVER: 'variant-hover',\n};\n\nexport const CHECKBOX_VARIANT = {\n  DEFAULT: 'variant-default',\n  FOCUS: 'variant-focus',\n  ACTIVE: 'variant-active',\n  DISABLED: 'variant-disabled',\n  ERROR: 'variant-error',\n};\nexport const checkboxVariants = [\n  CHECKBOX_VARIANT.DEFAULT,\n  CHECKBOX_VARIANT.FOCUS,\n  CHECKBOX_VARIANT.ACTIVE,\n  CHECKBOX_VARIANT.DISABLED,\n  CHECKBOX_VARIANT.ERROR,\n];\n\nexport const COMBOBOX_VARIANT = {\n  DEFAULT: 'variant-default',\n  FOCUS: 'variant-focus-input',\n  FOCUS_ICON: 'variant-focus-icon',\n  ACTIVE: 'variant-active-input',\n  ACTIVE_ICON: 'variant-active-icon',\n  DISABLED: 'variant-disabled',\n  ERROR: 'variant-error',\n};\n\nexport const comboBoxVariants = [\n  COMBOBOX_VARIANT.DEFAULT,\n  COMBOBOX_VARIANT.FOCUS,\n  COMBOBOX_VARIANT.FOCUS_ICON,\n  COMBOBOX_VARIANT.ACTIVE,\n  COMBOBOX_VARIANT.ACTIVE_ICON,\n  COMBOBOX_VARIANT.DISABLED,\n  COMBOBOX_VARIANT.ERROR,\n];\n\nexport const buttonVariants = [\n  'variant-default',\n  'variant-focus',\n  'variant-active',\n  'variant-disabled',\n  'variant-hover',\n];\n\nexport const sizes = ['s', 'm', 'l'];\n\nexport const orientation = ['horizontal', 'vertical'];\n","import React from 'react';\nimport { components } from 'react-select';\nimport { Reference } from 'react-popper';\n\nconst Control = props => (\n  <Reference>\n    {({ ref }) => (\n      <div ref={ref}>\n        <components.Control {...props} />\n      </div>\n    )}\n  </Reference>\n);\n\nexport default Control;\n","import React from 'react';\nimport ChevronSmallDown from '@elliemae/ds-icons/ChevronSmallDown';\nimport DSButton from '@elliemae/ds-basic/Button';\n\nconst DropdownIndicator = ({ innerRef, onKeyDown, ...rest }) => (\n  <DSButton\n    aria-label=\"dropdown-indicator\"\n    buttonType=\"text\"\n    className=\"dropdown-indicator\"\n    icon={<ChevronSmallDown />}\n    innerRef={innerRef}\n    onKeyDown={onKeyDown}\n    {...rest}\n  />\n);\n\nexport default DropdownIndicator;\n","/* eslint-disable react/destructuring-assignment */\nimport React from 'react';\nimport DSOverlay from '@elliemae/ds-basic/Overlay';\nimport { cx } from '@elliemae/ds-utilities/utils';\nimport { components } from 'react-select';\nimport { Popper } from 'react-popper';\nimport { PopperPositions } from '@elliemae/ds-basic/Popper';\n\n// todo: the dropdown menu should be separated to a basic component and then import it here\n// use this for the moment but this needs to be changed\nimport { Menu } from '@elliemae/ds-basic/Menu';\n\nconst SelectMenu = React.memo(props => {\n  const {\n    inlineMenu,\n    selectMeasure: { bounds },\n    expandMenuToContainer,\n    expandMenuOutsideContainer,\n    zIndex,\n  } = props.selectProps;\n\n  if (inlineMenu) {\n    return <components.Menu {...props} />;\n  }\n\n  const styleMenu = expandMenuToContainer ? { width: bounds.width } : {};\n  if (expandMenuOutsideContainer) {\n    styleMenu.width = 'auto';\n  }\n\n  return (\n    <DSOverlay\n      containerProps={{\n        className: 'combobox-menu-overlay',\n      }}\n      isOpen\n    >\n      <Popper\n        containerProps={{\n          className: 'combobox-menu-overlay-popper',\n        }}\n        modifiers={{\n          preventOverflow: {\n            enabled: true,\n            padding: 0,\n            boundariesElement: 'window',\n          },\n        }}\n        placement={PopperPositions.BOTTOM_START}\n      >\n        {({ ref, style }) => (\n          <div\n            ref={ref}\n            className={cx(\n              'combobox-menu-wrapper-external',\n              expandMenuOutsideContainer &&\n                'combobox-menu-wrapper-external-outside-container',\n            )}\n            style={{\n              zIndex,\n              ...style,\n              ...(expandMenuOutsideContainer ? { width: 'auto' } : {}),\n            }}\n          >\n            <Menu\n              className={cx(\n                'combobox-menu-menu',\n                expandMenuOutsideContainer &&\n                  'combobox-menu-menu-external-outside-container',\n              )}\n              style={styleMenu}\n              visible\n            >\n              <components.Menu {...props} />\n            </Menu>\n          </div>\n        )}\n      </Popper>\n    </DSOverlay>\n  );\n});\n\nexport default SelectMenu;\n","/* eslint-disable react/destructuring-assignment,max-lines,react/display-name, react/require-default-props */\nimport React from 'react';\nimport CloseCircle from '@elliemae/ds-icons/CloseCircle';\nimport DSButton from '@elliemae/ds-basic/Button';\n\nconst ClearIndicator = props => {\n  const {\n    getStyles,\n    innerProps: { ref },\n    innerRef,\n  } = props;\n  return (\n    <div\n      ref={ref}\n      aria-hidden=\"false\"\n      style={getStyles('clearIndicator', props)}\n    >\n      <DSButton\n        aria-label=\"clear-indicator\"\n        buttonType=\"text\"\n        className=\"clear-indicator\"\n        icon={<CloseCircle size=\"m\" />}\n        innerRef={innerRef}\n        onKeyDown={e => {\n          if (e.keyCode === 32 || e.keyCode === 13) {\n            e.preventDefault();\n            props.clearValue();\n          }\n          props.onKeyDown(e);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default ClearIndicator;\n","/* eslint-disable react/destructuring-assignment,max-lines,react/display-name, react/require-default-props */\nimport React from 'react';\nimport { get } from 'lodash';\nimport DSTruncatedTooltipText from '@elliemae/ds-basic/TruncatedTooltipText';\n\nconst CustomOption = ({ index, data, style, isScrolling }) => {\n  const {\n    items,\n    options: { useTruncatedText },\n  } = data;\n  const option = items[index];\n  const optionProps = {\n    ...option.props.innerProps,\n    style,\n    onClick: e => {\n      e.stopPropagation();\n      if (option.props.innerProps.onClick) option.props.innerProps.onClick(e);\n    },\n  };\n  if (\n    useTruncatedText &&\n    !isScrolling &&\n    get(option, 'props.selectProps.menuIsOpen')\n  ) {\n    return React.cloneElement(\n      option,\n      {\n        ...option.props,\n        innerProps: optionProps,\n      },\n      <DSTruncatedTooltipText value={option.props.children} />,\n    );\n  }\n  return React.cloneElement(option, {\n    ...option.props,\n    innerProps: optionProps,\n  });\n};\n\nexport default CustomOption;\n","/* eslint-disable react/destructuring-assignment,max-lines,react/display-name, react/require-default-props */\nimport React from 'react';\nimport DSTruncatedTooltipText from '@elliemae/ds-basic/TruncatedTooltipText';\nimport DSCheckbox from '@elliemae/ds-basic/form/Checkbox';\n\nconst CustomOptionMulti = ({ index, data, style, isScrolling }) => {\n  const {\n    items,\n    options: { useTruncatedText },\n  } = data;\n  const option = items[index];\n  const optionProps = {\n    ...option.props.innerProps,\n    style,\n    onClick: e => {\n      e.stopPropagation();\n      if (option.props.innerProps.onClick) option.props.innerProps.onClick(e);\n    },\n  };\n  if (useTruncatedText && !isScrolling) {\n    return React.cloneElement(\n      option,\n      {\n        ...option.props,\n        innerProps: optionProps,\n      },\n      <DSTruncatedTooltipText value={option.props.children} />,\n    );\n  }\n\n  let allSelected = false;\n  if (option.props.value === 'SELECT_ALL_COMBOBOX') {\n    if (\n      option.props.selectProps.value.length ===\n        option.props.selectProps.options.length - 1 ||\n      option.props.selectProps.value.length ===\n        option.props.selectProps.options.length\n    ) {\n      allSelected = true;\n    }\n  }\n  return React.cloneElement(option, {\n    ...option.props,\n    innerProps: optionProps,\n    children: (\n      <div>\n        <DSCheckbox\n          checked={option.props.isSelected || allSelected}\n          labelText={option.props.children}\n        />\n      </div>\n    ),\n  });\n};\n\nexport default CustomOptionMulti;\n","/* eslint-disable react/destructuring-assignment,max-lines,react/display-name, react/require-default-props */\nimport React from 'react';\n\nconst MultiSelectHeader = props => {\n  const count = props.children.filter(child => child.props.isSelected).length;\n  return (\n    <div className=\"combobox-multi-select-header\">{`${count} selected`}</div>\n  );\n};\n\nexport default MultiSelectHeader;\n","/* eslint-disable jsx-a11y/mouse-events-have-key-events */\n/* eslint-disable max-statements */\nimport React, { useRef, useState, useEffect } from 'react';\nimport { components } from 'react-select';\nimport { FixedSizeList as List } from 'react-window';\nimport memoize from 'memoize-one';\nimport { debounce } from 'lodash';\nimport CustomOption from './CustomOption';\nimport CustomOptionMulti from './CustomOptionMulti';\nimport MultiSelectHeader from './MultiSelectHeader';\n// import AllOption from './AllOption'\n\nconst createItemData = memoize((items, options) => ({\n  items,\n  options,\n}));\n\nconst scrollTo = (listRef, type) => {\n  if (listRef && listRef.current && listRef.current.props) {\n    const { items } = listRef.current.props.itemData;\n    const index = items.findIndex(item => item.props.isFocused);\n    listRef.current.scrollToItem(index, type);\n  }\n};\n// const scrollToMouse = debounce(scrollTo, 500)\nconst scrollToKeyword = debounce(scrollTo, 50);\n\nconst MenuList = props => {\n  const listRef = useRef(null);\n  const [inside, setInside] = useState(false);\n  const handleKeyDown = () => {\n    setInside(false);\n  };\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  });\n  const { children: options, selectProps, isMulti } = props;\n  const { customMenuItemOptions } = selectProps;\n  const { itemSize = 35 } = customMenuItemOptions;\n  const itemData = createItemData(options, customMenuItemOptions);\n  const maxOptionsScreen = 10;\n  const safeOptionLength = options.length || 1;\n  const height =\n    itemSize *\n    (safeOptionLength < maxOptionsScreen ? safeOptionLength : maxOptionsScreen);\n  const RenderOption = !isMulti ? CustomOption : CustomOptionMulti;\n  if (!options.length) return <components.MenuList {...props} />;\n\n  if (listRef && listRef.current && !inside) {\n    scrollToKeyword(listRef, 'center'); // use autoScroll\n  }\n  return (\n    <div\n      onMouseLeave={() => {\n        setInside(false);\n      }}\n    >\n      {isMulti && <MultiSelectHeader {...props} />}\n      {/* {isMulti && <AllOption {...props} />} */}\n      <List\n        ref={listRef}\n        className={`combobox-menu-list ${isMulti &&\n          'combobox-menu-list-is-multi'}`}\n        height={height}\n        itemCount={options.length}\n        itemData={itemData}\n        itemSize={itemSize}\n        onScroll={() => {\n          setInside(true);\n        }}\n        useIsScrolling\n      >\n        {RenderOption}\n      </List>\n    </div>\n  );\n};\nexport default MenuList;\n","import React from 'react';\nimport DSTruncatedTooltipText from '@elliemae/ds-basic/TruncatedTooltipText';\nimport { PopperPositions as Positions } from '@elliemae/ds-basic/Popper';\n\nfunction MultiValueLabel({ children }) {\n  return (\n    <DSTruncatedTooltipText tooltipPlacement={Positions.TOP} value={children} />\n  );\n}\n\nexport default MultiValueLabel;\n","import React from 'react';\nimport { get } from 'lodash';\nimport { components } from 'react-select';\n\nfunction MultiValueRemove(props) {\n  const value = get(props, 'selectProps.value');\n  if (Array.isArray(value) && value.length > 1) {\n    return (\n      <components.MultiValueRemove {...props}>,</components.MultiValueRemove>\n    );\n  }\n  return (\n    <components.MultiValueRemove {...props}> </components.MultiValueRemove>\n  );\n}\n\nexport default MultiValueRemove;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DSTruncatedTooltipText from '@elliemae/ds-basic/TruncatedTooltipText';\nimport { PopperPositions as Positions } from '@elliemae/ds-basic/Popper';\n\nfunction SingleValueLabel({ children }) {\n  return (\n    <DSTruncatedTooltipText tooltipPlacement={Positions.TOP} value={children} />\n  );\n}\n\nSingleValueLabel.propTypes = {\n  children: PropTypes.string.isRequired,\n};\nexport default SingleValueLabel;\n","/* eslint-disable jsx-a11y/no-noninteractive-tabindex */\nimport React from 'react';\nimport { components } from 'react-select';\n\nexport function ValueContainer({ children, ...rest }) {\n  return (\n    <div className=\"combobox-value-container\">\n      <components.ValueContainer {...rest}>\n        {children}\n      </components.ValueContainer>\n    </div>\n  );\n}\n\nexport default ValueContainer;\n","/* eslint-disable max-lines */\n/* eslint-disable react/forbid-prop-types */\n/* eslint-disable react/destructuring-assignment,max-lines,react/display-name, react/require-default-props */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { debounce, throttle } from 'lodash';\nimport Select from 'react-select';\nimport { Manager } from 'react-popper';\nimport { withContentRect } from 'react-measure';\nimport { cx } from '@elliemae/ds-utilities/utils';\nimport withSelectStringValueConverter from './withSelectStringValueConverter';\nimport { COMBOBOX_VARIANT, comboBoxVariants } from '../../../utils/prop-types';\nimport Control from './components/Control';\nimport DropdownIndicator from './components/DropdownIndicator';\nimport SelectMenu from './components/SelectMenu';\nimport ClearIndicator from './components/ClearIndicator';\nimport MenuList from './components/MenuList';\nimport MultiValueLabel from './components/MultiValueLabel';\nimport MultiValueRemove from './components/MultiValueRemove';\nimport SingleValueLabel from './components/SingleValueLabel';\nimport { calculateWidth } from './components/calculateWidth';\nimport { ValueContainer } from './components/ValueContainer';\n\n// todo: use convertClassPropsTo....\nconst ThemeConstants = {\n  prefix: 'em-ds',\n};\n\nconst blockName = 'selectbox';\nconst allOption = { value: 'SELECT_ALL_COMBOBOX', label: 'All' };\n\nconst getValues = (option, isMulti, valueProperty) => {\n  if (!option) return null;\n  return isMulti\n    ? option.map(mOption => mOption[valueProperty])\n    : option[valueProperty];\n};\n\nclass DSComboBox extends React.Component {\n  forceFocus = false;\n\n  isHover = undefined;\n\n  handleHover = debounce(value => {\n    if (this.state.isHover === this.isHover) return;\n    if (!this.unmount) this.setState({ isHover: value });\n  }, 0);\n\n  static defaultProps = {\n    showAllOption: false,\n  };\n\n  constructor(props) {\n    super(props);\n    this.clear = React.createRef();\n    this.arrow = React.createRef();\n    this.select = React.createRef();\n  }\n\n  state = {\n    focus: null,\n    isHover: undefined,\n  };\n\n  componentDidMount() {\n    const { handleHoverRef } = this.props;\n    if (handleHoverRef) handleHoverRef(this.handleHoverRef);\n    window.addEventListener(\n      'scroll',\n      throttle(this.handleOutsideScroll, 300),\n      true,\n    );\n  }\n\n  componentWillUnmount() {\n    this.unmount = true;\n    window.removeEventListener(\n      'scroll',\n      throttle(this.handleOutsideScroll, 300),\n      true,\n    );\n  }\n\n  handleOutsideScroll = () => {\n    if (this.isHover !== true && !this.unmount) {\n      this.isHover = false;\n      this.handleHover(false);\n    }\n  };\n\n  handleHoverRef = value => {\n    this.isHover = value;\n    this.handleHover(value);\n  };\n\n  // onKeyDownIndicator = (e) => {\n  //   if (e.key === 'ArrowLeft') {\n  //     if (this.clear && this.clear.focus) this.clear.focus()\n  //     else this.select.focus()\n  //   }\n  // }\n  onKeyDownClear = e => {\n    // if (e.key === 'ArrowRight') {\n    //   this.arrow.focus()\n    // } else if (e.key === 'ArrowLeft') {\n    //   this.select.focus()\n    // }\n    if (e.keyCode === 32 || e.keyCode === 13) {\n      this.select.focus();\n    }\n  };\n\n  handleKeyDown = e => {\n    // if (e.key === 'ArrowRight') e.preventDefault()\n    // if (e.target.type === 'text' && e.key === 'ArrowRight') {\n    //   if (this.clear && this.clear.focus) {\n    //     this.clear.focus()\n    //   } else {\n    //     this.arrow.focus()\n    //   }\n    // }\n    if (e.target.type === 'text' && e.key === 'Backspace') {\n      this.select.focus();\n    }\n    return () => {\n      const { value } = e.target;\n      if (!value && e.key === ' ') e.preventDefault();\n      this.props.onKeyDown(e);\n    };\n  };\n\n  render() {\n    const {\n      hideSelectedOptions = false,\n      autoFocus = false,\n      className = '',\n      hasError = false,\n      onFocus = () => null,\n      onBlur = () => null,\n      onChange = () => null,\n      // onKeyDown = () => null,\n      filterOption = undefined,\n      onClickDropdownIndicator = () => null,\n      onInputKeyDown = () => null,\n      onInputChange = undefined,\n      isRtl = false,\n      isFocused = undefined,\n      isMulti = false,\n      showAllOption = false,\n      value = null,\n      options = [],\n      clearable = false,\n      searchable = true,\n      disabled = false,\n      placeholder = '',\n      valueProperty = 'value',\n      labelProperty = 'label',\n      menuIsOpen = undefined,\n      inlineMenu = false,\n      noOptionsMessage = () => <span>No options</span>,\n      components: customComponents = {},\n      measureRef,\n      contentRect,\n      readOnly = false,\n      expandMenuToContainer = true,\n      expandMenuOutsideContainer = false,\n      customMenuItemOptions = {\n        useTruncatedText: false,\n        itemSize: 35,\n      },\n      returnValue = true,\n      variant = COMBOBOX_VARIANT.DEFAULT,\n      containerProps = {},\n      zIndex = 11,\n      ...restPropsToCustomizeSelect\n    } = this.props;\n    const { focus } = this.state;\n    let internalOptions = options;\n    let internalValue = value;\n    if (showAllOption && isMulti) {\n      internalOptions = [allOption, ...options];\n    }\n    if (this.allSelected && isMulti) {\n      internalValue = [allOption, ...value];\n    }\n    return (\n      <Manager>\n        <div\n          ref={measureRef}\n          className={cx(\n            `${ThemeConstants.prefix}-${blockName}-wrapper`,\n            className,\n            hasError &&\n              `${ThemeConstants.prefix}-${blockName}--${COMBOBOX_VARIANT.ERROR}`,\n            `${ThemeConstants.prefix}-${blockName}--${variant}`,\n            `focus-${focus}`,\n            isMulti && 'combo-multi',\n            expandMenuOutsideContainer && 'expanded-outside-container',\n          )}\n          {...containerProps}\n          onMouseEnter={() => {\n            this.handleHoverRef(undefined);\n          }}\n        >\n          <Select\n            ref={ref => {\n              this.select = ref;\n            }}\n            autoFocus={autoFocus}\n            classNamePrefix={`${ThemeConstants.prefix}-${blockName}`}\n            components={{\n              Control,\n              Menu:\n                !options || options.length === 0\n                  ? SelectMenu\n                  : props => (\n                      <div\n                        className={`select-menu-combo ${isMulti &&\n                          'select-menu-combo-multi'}`}\n                        onMouseLeave={() => {\n                          this.isHover = undefined;\n                          this.handleHover(undefined);\n                        }}\n                        onMouseOverCapture={() => {\n                          this.isHover = true;\n                          this.handleHover(true);\n                        }}\n                      >\n                        <SelectMenu {...props} />\n                      </div>\n                    ),\n              // Menu: SelectMenu,\n              DropdownIndicator: () => (\n                <DropdownIndicator\n                  innerRef={ref => {\n                    this.arrow = ref;\n                  }}\n                  onClick={onClickDropdownIndicator}\n                  onKeyDown={this.onKeyDownIndicator}\n                />\n              ),\n              ClearIndicator: props => (\n                <ClearIndicator\n                  {...props}\n                  innerRef={ref => {\n                    this.clear = ref;\n                  }}\n                  onKeyDown={this.onKeyDownClear}\n                />\n              ),\n              MultiValueLabel,\n              MultiValueRemove,\n              SingleValue: SingleValueLabel,\n              MenuList,\n              ValueContainer,\n              ...customComponents,\n            }}\n            customMenuItemOptions={customMenuItemOptions}\n            expandMenuOutsideContainer={expandMenuOutsideContainer}\n            expandMenuToContainer={expandMenuToContainer}\n            filterOption={filterOption}\n            getOptionLabel={option => option[labelProperty]}\n            getOptionValue={option => option[valueProperty]}\n            hideSelectedOptions={hideSelectedOptions}\n            inlineMenu={inlineMenu}\n            isClearable={clearable}\n            isDisabled={disabled || readOnly}\n            isFocused={isFocused}\n            isMulti={isMulti}\n            isRtl={isRtl}\n            isSearchable={readOnly ? false : searchable}\n            menuIsOpen={menuIsOpen === undefined ? this.isHover : menuIsOpen}\n            noOptionsMessage={(...args) => {\n              noOptionsMessage(...args);\n            }}\n            onBlur={onBlur}\n            onChange={\n              returnValue\n                ? (option, action) => {\n                    this.allSelected = false;\n                    this.isHover = undefined;\n                    this.setState({ isHover: undefined });\n                    if (\n                      showAllOption &&\n                      isMulti &&\n                      option.find(op => op.value === 'SELECT_ALL_COMBOBOX')\n                    ) {\n                      this.allSelected = true;\n                      return onChange(\n                        getValues(options, isMulti, valueProperty),\n                        action,\n                      );\n                    }\n                    return onChange(\n                      getValues(option, isMulti, valueProperty),\n                      action,\n                    );\n                  }\n                : (option, action) => {\n                    this.allSelected = false;\n                    this.isHover = undefined;\n                    this.setState({ isHover: undefined });\n                    if (\n                      showAllOption &&\n                      isMulti &&\n                      option.find(op => op.value === 'SELECT_ALL_COMBOBOX')\n                    ) {\n                      this.allSelected = true;\n                      return onChange(options, action);\n                    }\n                    return onChange(option, action);\n                  }\n            }\n            onFocus={onFocus}\n            onInputChange={onInputChange}\n            onInputKeyDown={onInputKeyDown}\n            onKeyDown={this.handleKeyDown}\n            options={internalOptions}\n            placeholder={placeholder}\n            selectMeasure={contentRect}\n            styles={{\n              control: () => null,\n              menu: () => {\n                if (expandMenuOutsideContainer) {\n                  const width = calculateWidth(options);\n                  if (!width) return null;\n                  return {\n                    width: `${width}px`,\n                  };\n                }\n                return null;\n              },\n              option: () => null,\n              dropdownIndicator: () => null,\n              clearIndicator: () => null,\n              placeholder: () => null,\n              indicatorSeparator: () => null,\n              multiValue: base => ({\n                ...base,\n                background: 'none',\n                minWidth: '3rem',\n              }),\n            }}\n            value={internalValue}\n            zIndex={zIndex}\n            {...restPropsToCustomizeSelect}\n          />\n        </div>\n      </Manager>\n    );\n  }\n}\n\nDSComboBox.propTypes = {\n  containerProps: PropTypes.shape({}),\n  handleHoverRef: PropTypes.func,\n  /**\n   * Whether the combo box uses auto focus or not\n   */\n  autoFocus: PropTypes.bool,\n  className: PropTypes.string,\n  /**\n   * Whether the combo box has error or not\n   */\n  hasError: PropTypes.bool,\n  /**\n   * Allows a function that is triggered once the combo box is focused\n   */\n  onFocus: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the combo box loses focus\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the combo box changes\n   */\n  onChange: PropTypes.func,\n  /**\n   * Allows a function that is triggered once a key is being pressed\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the combo box input key down\n   */\n  onInputKeyDown: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the combo box input changes\n   */\n  onInputChange: PropTypes.func,\n  /**\n   * Whether the combo box is rtl or not  //ASK\n   */\n  isRtl: PropTypes.bool,\n  /**\n   * Whether the combo box is focused or not\n   */\n  isFocused: PropTypes.bool,\n  /**\n   * Whether the combo box is multi or not\n   */\n  isMulti: PropTypes.bool,\n  inputValue: PropTypes.string,\n  showAllOption: PropTypes.bool,\n  allOption: PropTypes.shape({\n    label: PropTypes.string,\n    value: PropTypes.string,\n  }),\n  /**\n   * Value that the combo box has as default\n   */\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.object,\n  ]),\n  /**\n   * Value that the combo box has as default\n   */\n  options: PropTypes.array,\n  /**\n   * Whether the combo box is clearable or not\n   */\n  clearable: PropTypes.bool,\n  /**\n   * Whether the combo box is searchable or not. Set to false makes the input non-editable\n   */\n  searchable: PropTypes.bool,\n  /**\n   * Whether the combo box is disabled or not\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Placeholder for the combo box\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Displays a Loading Indicator in the menu\n   */\n  loading: PropTypes.bool,\n  valueProperty: PropTypes.string,\n  labelProperty: PropTypes.string,\n  /**\n   * Whether the combo box menu is open or not\n   */\n  menuIsOpen: PropTypes.bool,\n  /**\n   * Whether to show the combo box menu inline or not\n   */\n  inlineMenu: PropTypes.bool,\n  /**\n   * Message to show once there aren't any options\n   */\n  noOptionsMessage: PropTypes.func,\n  /**\n   * Components you can add to the combo box\n   */\n  measureRef: PropTypes.func,\n  /**\n   * Whether the combo box is read only or not\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Whether the combo box can be expanded the menu to container or not\n   */\n  expandMenuToContainer: PropTypes.bool,\n  /**\n   * Allow have options larger than his container\n   */\n  expandMenuOutsideContainer: PropTypes.bool,\n  /**\n   * Custom combo box menu item options\n   */\n  customMenuItemOptions: PropTypes.object,\n  /**\n   * Whether the combo box is has value to return or not\n   */\n  returnValue: PropTypes.bool,\n  /**\n    [\n      'variant-default',\n      'variant-focus-input',\n      'variant-focus-icon',\n      'variant-active-input',\n      'variant-active-icon',\n      'variant-disabled',\n      'variant-error',\n    ]\n   */\n  variant: PropTypes.oneOf(comboBoxVariants),\n  hideSelectedOptions: PropTypes.bool,\n  maxOptions: PropTypes.number,\n  /**\n   * Custom method to filter whether an option should be displayed in the menu\n   */\n  filterOption: PropTypes.func,\n  onClickDropdownIndicator: PropTypes.func,\n  /**\n   * Object with custom components for react-select\n   */\n  components: PropTypes.object,\n  contentRect: PropTypes.object,\n  zIndex: PropTypes.number,\n};\n\nexport { components } from 'react-select';\nexport { COMBOBOX_VARIANT };\nexport default withSelectStringValueConverter(\n  withContentRect('bounds')(DSComboBox),\n);\n","const letterFactor = 6;\nconst fixedSpace = 48;\nexport function calculateWidth(options) {\n  const longest = options.reduce((a, b) => {\n    if (a && a.label && b && b.label)\n      return a.label.length > b.label.length ? a : b;\n    return 0;\n  });\n  if (longest && longest.label && longest.label.length) {\n    return longest.label.length * letterFactor + fixedSpace;\n  }\n  return 0;\n}\n","import React from 'react';\nexport const DropDownContext = React.createContext();\n","/* eslint-disable react/prop-types */\n/* eslint-disable import/no-cycle */\nimport React, { useContext } from 'react';\nimport { get } from 'lodash';\nimport ChevronSmallDown from '@elliemae/ds-icons/ChevronSmallDown';\nimport DSButton, { BUTTON_VARIANT } from '@elliemae/ds-basic/Button';\nimport { DropDownContext } from '../context';\n\nconst DropdownIndicator = ({\n  innerRef,\n  onKeyDown,\n  options,\n  theme,\n  ...rest\n}) => {\n  const {\n    changeHandleOpening,\n    changeMenuOpen,\n    inputInFocus,\n    handleOpening,\n    menuOpen,\n    onClickDropdownIndicator,\n  } = useContext(DropDownContext);\n\n  const handleOnClick = (e) => {\n    onClickDropdownIndicator(e);\n    changeMenuOpen(!menuOpen);\n    changeHandleOpening(!handleOpening);\n  };\n\n  const handleOnKeyDown = (e) => {\n    if (e.key === 'Enter') {\n      changeMenuOpen(!menuOpen);\n      e.preventDefault();\n    }\n  };\n\n  return (\n    <DSButton\n      aria-label=\"dropdown-indicator\"\n      buttonType=\"text\"\n      className={`dropdown-indicator ${\n        get(rest, 'selectProps.menuIsOpen', false) && !inputInFocus\n          ? 'active'\n          : ''\n      }`}\n      icon={<ChevronSmallDown />}\n      innerRef={innerRef}\n      onClick={handleOnClick}\n      onKeyDown={handleOnKeyDown}\n      tabIndex={-1}\n      variant={\n        get(rest, 'selectProps.menuIsOpen', false) && !inputInFocus\n          ? BUTTON_VARIANT.ACTIVE\n          : BUTTON_VARIANT.DEFAULT\n      }\n      {...rest}\n    />\n  );\n};\n\nexport default DropdownIndicator;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { components } from 'react-select';\nimport DSSeparator from '@elliemae/ds-basic/Separator';\nimport { getGroupHeaderPosition } from './utils';\n\nconst GroupHeading = props => {\n  const headerPosition = getGroupHeaderPosition(props.id);\n  const { hasSeparator } = props.selectProps.options[headerPosition];\n\n  return (\n    <Wrapper>\n      {hasSeparator && <StyledSeparator type=\"non-form\" />}\n      <components.GroupHeading {...props} />\n    </Wrapper>\n  );\n};\n\nconst StyledSeparator = styled(DSSeparator)`\n  width: auto;\n  margin: ${props => props.theme.space.xs};\n  margin-top: unset;\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport default GroupHeading;\n","export const getGroupHeaderPosition = string =>\n  string.match(/group(.*)/g)[0].match(/[0-9]/g)[0];\n","import React, { useEffect } from 'react';\nimport { components } from 'react-select';\nimport PropTypes from 'prop-types';\n\nconst Content = ({ scheduleUpdate, styleMenu, ...rest }) => {\n  useEffect(() => {\n    // trigger popper update on input change PUI-4069\n    scheduleUpdate();\n  }, [rest?.selectProps?.inputValue]);\n  return (\n    <div style={styleMenu} data-testid=\"combobox-menu\">\n      <components.Menu {...rest} />\n    </div>\n  );\n};\n\nContent.propTypes = {\n  scheduleUpdate: PropTypes.func,\n  styleMenu: PropTypes.any,\n};\n\nexport default Content;\n","/* eslint-disable react/prop-types */\n/* eslint-disable react/destructuring-assignment */\nimport React from 'react';\nimport { components } from 'react-select';\nimport DSPopper, { PopperPositions } from '@elliemae/ds-basic/Popper';\n\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\n// todo: the dropdown menu should be separated to a basic component and then import it here\n// use this for the moment but this needs to be changed\nimport Content from './Content';\n\nconst TriggerComponent = aggregatedClasses('div')('combobox-trigger', null);\n\nconst SelectMenu = React.memo((props) => {\n  const {\n    inlineMenu,\n    selectMeasure: { bounds },\n    expandMenuToContainer,\n    expandMenuOutsideContainer,\n    zIndex,\n  } = props.selectProps;\n\n  if (inlineMenu) {\n    return <components.Menu {...props} />;\n  }\n\n  const styleMenu = expandMenuToContainer ? { width: bounds.width } : {};\n  if (expandMenuOutsideContainer) {\n    styleMenu.width = 'auto';\n  }\n\n  return (\n    <DSPopper\n      contentComponent={<Content {...props} styleMenu={styleMenu} />}\n      isOpen\n      placement={PopperPositions.BOTTOM_START}\n      preventOverflow={<TriggerComponent />}\n      showArrow={false}\n      triggerComponent={<TriggerComponent />}\n      zIndex={zIndex}\n    />\n  );\n});\n\nexport default SelectMenu;\n","import React from 'react';\nimport { components } from 'react-select';\nimport { Reference } from 'react-popper';\n\nconst Control = props => (\n  <Reference>\n    {({ ref }) => (\n      <div ref={ref}>\n        <components.Control {...props} />\n      </div>\n    )}\n  </Reference>\n);\n\nexport default Control;\n","/* eslint-disable react/prop-types */\n/* eslint-disable react/destructuring-assignment,max-lines,react/display-name, react/require-default-props */\nimport React, { useContext } from 'react';\nimport { get } from 'lodash';\nimport CloseXsmall from '@elliemae/ds-icons/CloseXsmall';\nimport DSButton from '@elliemae/ds-basic/Button';\nimport { DropDownContext } from '../context';\n\nconst ClearIndicator = (props) => {\n  const {\n    getStyles,\n    innerProps: { ref, ...restInnerProps },\n    innerRef,\n  } = props;\n  const c = useContext(DropDownContext);\n\n  return (\n    <div\n      {...restInnerProps}\n      ref={ref}\n      aria-hidden=\"false\"\n      style={getStyles('clearIndicator', props)}\n    >\n      <DSButton\n        {...props}\n        aria-label=\"clear-indicator\"\n        buttonType=\"text\"\n        className=\"clear-indicator\"\n        icon={<CloseXsmall size=\"m\" />}\n        innerRef={innerRef}\n        onKeyDown={(e) => {\n          if (e.keyCode === 32 || e.keyCode === 13) {\n            e.preventDefault();\n            props.clearValue();\n            const select = get(c, 'select.current');\n            if (select && select.focus) select.focus();\n          }\n          if (props.onKeyDown) props.onKeyDown(e);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default ClearIndicator;\n","/* eslint-disable react/destructuring-assignment,max-lines,react/display-name, react/require-default-props */\nimport React from 'react';\nimport { get, isArray } from 'lodash';\nimport DSTruncatedTooltipText from '@elliemae/ds-basic/TruncatedTooltipText';\nimport DSSeparator from '@elliemae/ds-basic/Separator';\n\nconst CustomOption = ({ index, data, style, isScrolling }) => {\n  const {\n    items,\n    options: { useTruncatedText },\n  } = data;\n  const option = items[index];\n  const optionProps = {\n    ...option.props.innerProps,\n    style,\n    'data-testid': 'combobox-option',\n    onClick: e => {\n      e.stopPropagation();\n      if (option.props.innerProps.onClick) option.props.innerProps.onClick(e);\n    },\n  };\n\n  if (\n    useTruncatedText &&\n    !isScrolling &&\n    get(option, 'props.selectProps.menuIsOpen')\n  ) {\n    return React.cloneElement(\n      option,\n      {\n        ...option.props,\n        innerProps: optionProps,\n        tabIndex: 0,\n      },\n      <>\n        {option.props.data.hasSeparator &&\n          !isArray(option.props.data.options) && (\n            <DSSeparator margin=\"none\" type=\"non-form\" />\n          )}\n        <DSTruncatedTooltipText value={option.props.children} />\n      </>,\n    );\n  }\n\n  return React.cloneElement(\n    option,\n    {\n      ...option.props,\n      tabIndex: 0,\n      innerProps: optionProps,\n    },\n    <>\n      {option.props.data.hasSeparator &&\n        !isArray(option.props.data.options) && (\n          <DSSeparator margin=\"none\" type=\"non-form\" />\n        )}\n      {option.props.children}\n    </>,\n  );\n};\n\nexport default CustomOption;\n","/* eslint-disable react/destructuring-assignment,max-lines,react/display-name, react/require-default-props */\nimport React from 'react';\nimport DSTruncatedTooltipText from '@elliemae/ds-basic/TruncatedTooltipText';\nimport DSCheckbox from '@elliemae/ds-basic/form/Checkbox';\n\nconst CustomOptionMulti = ({ index, data, style, isScrolling }) => {\n  const {\n    items,\n    options: { useTruncatedText },\n  } = data;\n\n  const option = items[index];\n  const optionProps = {\n    ...option.props.innerProps,\n    style,\n    onClick: e => {\n      e.stopPropagation();\n      if (option.props.innerProps.onClick) option.props.innerProps.onClick(e);\n    },\n  };\n  if (useTruncatedText && !isScrolling) {\n    return React.cloneElement(\n      option,\n      {\n        ...option.props,\n        innerProps: optionProps,\n      },\n      <DSTruncatedTooltipText value={option.props.children} />,\n    );\n  }\n\n  return React.cloneElement(option, {\n    ...option.props,\n    innerProps: optionProps,\n    children: (\n      <div className=\"combobox-v2-option-multiple-container\">\n        <DSCheckbox\n          checked={option.props.isSelected}\n          labelText={option.props.children}\n        />\n      </div>\n    ),\n  });\n};\n\nexport default CustomOptionMulti;\n","/* eslint-disable import/no-cycle */\n/* eslint-disable react/destructuring-assignment,max-lines,react/display-name, react/require-default-props */\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport DSButton, { BUTTON_VARIANT } from '@elliemae/ds-basic/Button';\nimport DSSeparator from '@elliemae/ds-basic/Separator';\nimport { DropDownContext } from '../context';\n\nconst MultiSelectHeader = (props) => {\n  const count = props.children.filter((child) => child.props.isSelected).length;\n  const { onSelectAll, selectAll, selectAllDisabled } = useContext(\n    DropDownContext,\n  );\n\n  return (\n    <HeaderWrapper>\n      <ContentWrapper>\n        <HeaderTitle>{`${count} selected`}</HeaderTitle>\n        {!selectAllDisabled && (\n          <ActionButtons>\n            <StyledButton\n              buttonType=\"text\"\n              labelText=\"All\"\n              size=\"s\"\n              onClick={() => onSelectAll(true)}\n              variant={selectAll && BUTTON_VARIANT.DISABLED}\n            />\n            <StyledSeparator\n              orientation=\"vertical\"\n              position=\"center\"\n              type=\"group-level\"\n              margin=\"none\"\n            />\n            <StyledButton\n              buttonType=\"text\"\n              labelText=\"Clear\"\n              size=\"s\"\n              onClick={() => onSelectAll(false)}\n              variant={!selectAll && count === 0 && BUTTON_VARIANT.DISABLED}\n            />\n          </ActionButtons>\n        )}\n      </ContentWrapper>\n      <DSSeparator position=\"center\" type=\"non-form\" margin=\"none\" />\n    </HeaderWrapper>\n  );\n};\n\nconst HeaderWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 0 ${(props) => props.theme.space.xs};\n`;\n\nconst ContentWrapper = styled.div`\n  display: flex;\n  align-items: flex-end;\n  justify-content: space-between;\n  height: ${(props) => props.theme.space.s};\n  padding-bottom: 4px;\n`;\n\nconst HeaderTitle = styled.span`\n  color: ${(props) => props.theme.colors.neutral[500]};\n`;\n\nconst ActionButtons = styled.div`\n  display: inline-flex;\n  color: ${(props) => props.theme.colors.neutral[500]};\n`;\n\nconst StyledSeparator = styled(DSSeparator)`\n  height: auto;\n  width: auto;\n`;\n\nconst StyledButton = styled(DSButton)`\n  padding: 0 ${(props) => props.theme.space.xxs};\n`;\n\nMultiSelectHeader.propTypes = {\n  children: PropTypes.array,\n};\n\nexport default MultiSelectHeader;\n","/* eslint-disable max-statements */\n/* eslint-disable complexity */\nimport React, { useRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { components } from 'react-select';\nimport { FixedSizeList as List } from 'react-window';\nimport memoize from 'memoize-one';\nimport CustomOption from './CustomOption';\nimport CustomOptionMulti from './CustomOptionMulti';\nimport MultiSelectHeader from './MultiSelectHeader';\n\nconst createItemData = memoize((items, options) => ({\n  items,\n  options,\n}));\n\nconst scrollTo = (listRef, type) => {\n  if (listRef && listRef.current && listRef.current.props) {\n    const { items } = listRef.current.props.itemData;\n    const index = items.findIndex((item) => item.props.isFocused);\n    listRef.current.scrollToItem(index, type);\n  }\n};\n\nconst MenuList = (props) => {\n  const { children: options, selectProps, isMulti } = props;\n  const {\n    customMenuItemOptions,\n    selectMeasure: {\n      bounds: { bottom },\n    },\n  } = selectProps;\n  const listRef = useRef(null);\n  const [inside, setInside] = useState(false);\n  const remainingHeight = window.innerHeight - bottom - 10;\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  });\n\n  const handleKeyDown = () => setInside(false);\n\n  const countOptions = (opts) => {\n    let count;\n    if (opts.length && opts[0].type.name === 'Group') {\n      count = opts.reduce(\n        (o1, o2) => o1.props.options.length + o2.props.options.length,\n      );\n    } else {\n      count = opts.length;\n    }\n    return count;\n  };\n\n  const { itemSize = 35, maxOptions } = customMenuItemOptions;\n  const itemData = createItemData(options, customMenuItemOptions);\n  const maxOptionsScreen = maxOptions;\n  const safeOptionLength = countOptions(options) || 1;\n  const calculatedHeight =\n    itemSize *\n    (safeOptionLength < maxOptionsScreen || !maxOptionsScreen\n      ? safeOptionLength\n      : maxOptionsScreen);\n\n  const RenderOption = !isMulti ? CustomOption : CustomOptionMulti;\n\n  let height;\n  if (maxOptions) {\n    height = calculatedHeight;\n  } else if (remainingHeight > calculatedHeight) {\n    height = calculatedHeight;\n  } else {\n    height = remainingHeight;\n  }\n\n  if (listRef && listRef.current && !inside) {\n    scrollTo(listRef); // use autoScroll\n  }\n\n  if (!options.length) return <components.MenuList {...props} />;\n\n  return (\n    <div data-testid=\"combobox-menu-list\" onMouseLeave={() => setInside(false)}>\n      {isMulti && <MultiSelectHeader {...props} />}\n      <List\n        ref={listRef}\n        className={`combobox-menu-list ${\n          isMulti && 'combobox-menu-list-is-multi'\n        }`}\n        height={height}\n        itemCount={options.length}\n        itemData={itemData}\n        itemSize={itemSize}\n        onScroll={() => setInside(true)}\n        useIsScrolling\n      >\n        {RenderOption}\n      </List>\n    </div>\n  );\n};\n\nMenuList.propTypes = {\n  children: PropTypes.arrayOf(PropTypes.element),\n  selectProps: PropTypes.object,\n  isMulti: PropTypes.bool,\n};\n\nexport default MenuList;\n","import React from 'react';\nimport DSTruncatedTooltipText from '@elliemae/ds-basic/TruncatedTooltipText';\nimport { PopperPositions as Positions } from '@elliemae/ds-basic/Popper';\n\nfunction MultiValueLabel({ children }) {\n  return (\n    <DSTruncatedTooltipText tooltipPlacement={Positions.TOP} value={children} />\n  );\n}\n\nexport default MultiValueLabel;\n","import React from 'react';\nimport { components } from 'react-select';\n\nfunction MultiValueRemove({ innerProps, ...rest }) {\n  const innerPropsWithOutRemoval = {\n    ...innerProps,\n    onClick: () => {},\n    onTouchEnd: () => {},\n    onMouseDown: () => {},\n  };\n  return (\n    <components.MultiValueRemove\n      {...rest}\n      innerProps={innerPropsWithOutRemoval}\n    >\n      ,\n    </components.MultiValueRemove>\n  );\n}\n\nexport default MultiValueRemove;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DSTruncatedTooltipText from '@elliemae/ds-basic/TruncatedTooltipText';\nimport { PopperPositions as Positions } from '@elliemae/ds-basic/Popper';\n\nfunction SingleValueLabel({ children }) {\n  return (\n    <DSTruncatedTooltipText tooltipPlacement={Positions.TOP} value={children} />\n  );\n}\n\nSingleValueLabel.propTypes = {\n  children: PropTypes.string.isRequired,\n};\nexport default SingleValueLabel;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { DSCircularProgressIndicator } from '@elliemae/ds-basic/CircularProgressIndicator';\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 12px;\n`;\n\nconst LoadingIndicator = () => (\n  <Wrapper data-testid=\"ds-combobox_loading-indicator\">\n    <DSCircularProgressIndicator size=\"m\" />\n  </Wrapper>\n);\n\nexport default LoadingIndicator;\n","/* eslint-disable react/prop-types */\n/* eslint-disable jsx-a11y/no-noninteractive-tabindex */\nimport React, { useContext, useRef } from 'react';\nimport { components } from 'react-select';\nimport { cx } from '@elliemae/ds-utilities/utils';\nimport { DropDownContext } from '../context';\n\nexport function ValueContainer({ children, ...rest }) {\n  const valueContainerRef = useRef(null);\n  const c = useContext(DropDownContext);\n  return (\n    <div\n      ref={valueContainerRef}\n      className={cx(\n        'combobox-v2-value-container',\n        c.inputInFocus && 'in-focus',\n        c.value && c.clearable && 'has-value',\n        c.removeDropdownIndicator && 'dropdown-indicator-removed',\n      )}\n    >\n      <components.ValueContainer {...rest}>\n        {children}\n      </components.ValueContainer>\n    </div>\n  );\n}\n\nexport default ValueContainer;\n","/* eslint-disable spaced-comment */\n/* eslint-disable no-else-return */\n/* eslint-disable max-statements */\n/* eslint-disable no-confusing-arrow */\n/* eslint-disable import/no-cycle, max-lines */\nimport React, { useCallback, useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Select, { Creatable, createFilter } from 'react-select';\nimport { Manager } from 'react-popper';\nimport { withContentRect } from 'react-measure';\nimport { cx, isEqual } from '@elliemae/ds-utilities/utils';\nimport theme from '@elliemae/ds-system/theme';\nimport usePrevious from '@elliemae/ds-utilities/hooks/usePrevious';\nimport useShouldRecalculate from '@elliemae/ds-utilities/hooks/useShouldRecalculate';\n\nimport { TooltipTextProvider } from '@elliemae/ds-basic/TruncatedTooltipText';\nimport withSelectStringValueConverter from '../v1/withSelectStringValueConverter';\nimport DropdownIndicator from './components/DropdownIndicator';\nimport GroupHeading from './components/GroupHeading';\nimport SelectMenu from './components/SelectMenu';\nimport Control from './components/Control';\nimport ClearIndicator from './components/ClearIndicator';\nimport MenuList from './components/MenuList';\nimport MultiValueLabel from './components/MultiValueLabel';\nimport MultiValueRemove from './components/MultiValueRemove';\nimport SingleValueLabel from './components/SingleValueLabel';\nimport LoadingIndicator from './components/LoadingIndicator';\nimport { calculateWidth } from './components/calculateWidth';\nimport { ValueContainer } from './components/ValueContainer';\nimport { DropDownContext } from './context';\n\nconst blockName = 'em-ds-combobox';\nconst container = `${blockName}-container`;\nconst getValues = (option, isMulti, valueProperty) => {\n  if (!option) return null;\n  return isMulti\n    ? option.map((mOption) => mOption[valueProperty])\n    : option[valueProperty];\n};\nconst createOption = (label, value) => ({ label, value });\n\nconst DSComboBox2 = ({\n  hideSelectedOptions = false,\n  autoFocus = false,\n  className = '',\n  hasError = false,\n  onFocus = () => null,\n  onBlur = () => null,\n  onChange = () => null,\n  // onKeyDown = () => null,\n  filterOption = createFilter({ ignoreAccents: false }), // this fix performance issue\n  onClickDropdownIndicator = () => null,\n  onInputKeyDown = () => null,\n  onInputChange = () => null,\n  isRtl = false,\n  isFocused = undefined,\n  isMulti = false,\n  isFreeSolo,\n  selectAllDisabled = false,\n  formatCreateLabel,\n  createOptionPosition,\n  value: selectedValue = null,\n  options = [],\n  clearable = false,\n  searchable = true,\n  disabled = false,\n  placeholder = '',\n  valueProperty = 'value',\n  labelProperty = 'label',\n  loading = false,\n  menuIsOpen = false,\n  inlineMenu = false,\n  components: customComponents = {},\n  measureRef,\n  contentRect,\n  readOnly = false,\n  returnValue = true,\n  expandMenuToContainer = true,\n  expandMenuOutsideContainer = false,\n  customMenuItemOptions = {\n    useTruncatedText: false,\n    itemSize: 35,\n  },\n  containerProps = {},\n  maxOptions,\n  zIndex = 11,\n  componentsStyle,\n  keepTypedValue = true, //TEMPORARY PROP UNTIL WE HAVE THIS FUNCTIONALITY IN SINGLE FREE SOLO\n  ...restPropsToCustomizeSelect\n}) => {\n  const select = useRef();\n  const [selectAll, setSelectAll] = useState(false);\n  const [inputInFocus, setFocus] = useState(false);\n  const [value, setValue] = useState(selectedValue);\n  const [inputValue, setInputValue] = useState('');\n  const [handleOpening, setHandleOpening] = useState(false);\n  const [menuOpen, setMenuOpen] = useState(menuIsOpen);\n  const [isMultipleKeyPressed, setIsMultipleKeyPressed] = useState(false);\n  const prevOptions = usePrevious(options);\n  const optionsChanged = useShouldRecalculate(isEqual(prevOptions, options));\n  const SelectComponent = isFreeSolo ? Creatable : Select;\n\n  useEffect(() => {\n    setValue(selectedValue);\n  }, [selectedValue]);\n\n  useEffect(() => {\n    if (value) {\n      const newValue = options.find((option) => value.value === option.value);\n      setValue(newValue);\n    }\n  }, [optionsChanged]);\n\n  const onSelectAll = useCallback((isSelected) => {\n    setSelectAll(isSelected);\n    if (isSelected) {\n      onChange(getValues(options, isSelected, valueProperty));\n    } else {\n      onChange(getValues());\n    }\n  }, []);\n\n  const handleInputChange = useCallback((val, action) => {\n    setInputValue(val);\n    if (action.action === 'input-change' && !isMulti) {\n      setMenuOpen(true);\n      if (!inlineMenu && keepTypedValue) {\n        onChange({ value: val, label: val }, action);\n      }\n    }\n    if (val) onInputChange(val, action);\n  }, []);\n\n  const handleOnKeyDown = (e) => {\n    if (e.key === 'Backspace' && !e.target.value && value) {\n      onChange('', { action: 'input-clear' }); // this clears the input\n    }\n    if (e.key === 'Control') setIsMultipleKeyPressed(true);\n    // If Ctrl + Enter are pressed, focus is set to the input and the menu closes\n    if (isMultipleKeyPressed && e.key === 'Enter') {\n      setFocus(true);\n      setMenuOpen(false);\n      setIsMultipleKeyPressed(false);\n      e.preventDefault();\n    }\n  };\n\n  const handleOnChange = (newValue, action) => {\n    setMenuOpen(isMulti);\n    if (!isMulti) select.current.blur();\n    if (returnValue) {\n      if (isFreeSolo) return onChange(newValue, action);\n      return onChange(getValues(newValue, isMulti, valueProperty), action);\n    }\n    if (isMulti && selectAll) return onChange(options, action);\n    return onChange(newValue, action);\n  };\n\n  const handleCreateNewOption = (inputVal) => {\n    const newOption = createOption(inputVal, inputVal);\n    const prevValue = Array.isArray(value) ? value : [];\n    const newValue = isMulti ? [...prevValue, newOption] : newOption;\n    if (!isMulti) select.current.blur();\n    setMenuOpen(isMulti);\n    onChange(newValue);\n  };\n\n  const handleFocus = useCallback((e) => {\n    setFocus(true);\n    if (!inlineMenu) setMenuOpen(true);\n    onFocus(e);\n    setHandleOpening(true);\n  }, []);\n\n  const handleBlur = (e) => {\n    setFocus(false);\n    if (!inlineMenu) setMenuOpen(false);\n    onBlur(e, value);\n    setHandleOpening(false);\n  };\n\n  return (\n    <TooltipTextProvider>\n      <DropDownContext.Provider\n        value={{\n          inputInFocus,\n          value,\n          isMulti,\n          menuOpen,\n          handleOpening,\n          selectAll,\n          selectAllDisabled,\n          changeHandleOpening: (isOpen) => setHandleOpening(isOpen),\n          changeMenuOpen: (isOpen) => setMenuOpen(isOpen),\n          onClickDropdownIndicator,\n          onSelectAll: (val) => onSelectAll(val),\n          clearable,\n          removeDropdownIndicator: customComponents.DropdownIndicator === null,\n          select,\n        }}\n      >\n        <Manager>\n          <div\n            ref={measureRef}\n            className={cx(\n              `${container}`,\n              inputInFocus && 'in-focus',\n              hasError && 'with-error',\n              disabled && 'is-disabled',\n              className,\n            )}\n            data-testid=\"combobox\"\n            {...containerProps}\n          >\n            <SelectComponent\n              ref={select}\n              autoFocus={autoFocus}\n              classNamePrefix={blockName}\n              // If it is multiselect let the menu open on select.\n              closeMenuOnSelect={!isMulti}\n              components={{\n                Control,\n                // IndicatorSeparator,\n                Menu: SelectMenu,\n                DropdownIndicator,\n                ClearIndicator,\n                GroupHeading,\n                MultiValueLabel,\n                MultiValueRemove,\n                SingleValue: SingleValueLabel,\n                MenuList,\n                ValueContainer,\n                ...customComponents,\n              }}\n              customMenuItemOptions={{ maxOptions, ...customMenuItemOptions }}\n              expandMenuOutsideContainer={expandMenuOutsideContainer}\n              expandMenuToContainer={expandMenuToContainer}\n              filterOption={filterOption}\n              getOptionLabel={(option) => option[labelProperty]}\n              getOptionValue={(option) => option[valueProperty]}\n              formatCreateLabel={formatCreateLabel}\n              createOptionPosition={createOptionPosition}\n              hideSelectedOptions={hideSelectedOptions}\n              inlineMenu={inlineMenu}\n              isClearable={clearable}\n              isDisabled={disabled || readOnly}\n              isFocused={isFocused}\n              isMulti={isMulti}\n              isRtl={isRtl}\n              isSearchable={readOnly ? false : searchable}\n              menuIsOpen={menuOpen}\n              noOptionsMessage={() =>\n                loading ? <LoadingIndicator /> : 'No matches found'\n              }\n              onBlur={handleBlur}\n              onChange={handleOnChange}\n              onCreateOption={handleCreateNewOption}\n              onFocus={handleFocus}\n              onInputChange={handleInputChange}\n              onInputKeyDown={onInputKeyDown}\n              onKeyDown={handleOnKeyDown}\n              options={loading ? [] : options}\n              placeholder={placeholder}\n              selectMeasure={contentRect}\n              styles={{\n                control: () => null,\n                option: () => null,\n                dropdownIndicator: () => null,\n                groupHeading: (provided) => ({ ...provided }),\n                clearIndicator: () => null,\n                placeholder: () => null,\n                indicatorSeparator: () => null,\n                singleValue: (provided) => ({ ...provided, maxWidth: '90%' }),\n                multiValueLabel: (provided) => ({\n                  ...provided,\n                  backgroundColor: 'transparent',\n                }),\n                multiValue: (provided) => ({\n                  ...provided,\n                  backgroundColor: 'transparent',\n                }),\n                multiValueRemove: (provided) => ({\n                  ...provided,\n                  '&:hover': {\n                    backgroundColor: 'transparent',\n                    color: theme.colors.neutral[800],\n                  },\n                }),\n                valueContainer: (provided) => ({\n                  ...provided,\n                  flexWrap: 'nowrap',\n                }),\n                menu: () => {\n                  if (expandMenuOutsideContainer) {\n                    const width = calculateWidth(options);\n                    if (!width) return null;\n                    return { width: `${width}px` };\n                  }\n                  if (loading) return { height: '72px' };\n                  return null;\n                },\n                ...componentsStyle,\n              }}\n              tabSelectsValue={false}\n              value={value}\n              inputValue={inputValue}\n              zIndex={zIndex}\n              {...restPropsToCustomizeSelect}\n            />\n          </div>\n        </Manager>\n      </DropDownContext.Provider>\n    </TooltipTextProvider>\n  );\n};\n\nDSComboBox2.propTypes = {\n  containerProps: PropTypes.object,\n  handleHoverRef: PropTypes.func,\n  /**\n   * Whether the combo box uses auto focus or not\n   */\n  autoFocus: PropTypes.bool,\n  className: PropTypes.string,\n  /**\n   * Whether the combo box has error or not\n   */\n  hasError: PropTypes.bool,\n  /**\n   * Allows a function that is triggered once the combo box is focused\n   */\n  onFocus: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the combo box loses focus\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the combo box changes\n   */\n  onChange: PropTypes.func,\n  /**\n   * Allows a function that is triggered once a key is being pressed\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the combo box input key down\n   */\n  onInputKeyDown: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the combo box input changes\n   */\n  onInputChange: PropTypes.func,\n  /**\n   * Whether the combo box is rtl or not  //ASK\n   */\n  isRtl: PropTypes.bool,\n  /**\n   * Whether the combo box is focused or not\n   */\n  isFocused: PropTypes.bool,\n  /**\n   * Whether the select all/clear buttons are enabled or not\n   */\n  selectAllDisabled: PropTypes.bool,\n  /**\n   * Whether the combo box is multi or not\n   */\n  isMulti: PropTypes.bool,\n  inputValue: PropTypes.string,\n  showAllOption: PropTypes.bool,\n  allOption: PropTypes.shape({\n    label: PropTypes.string,\n    value: PropTypes.string,\n  }),\n  /**\n   * Value that the combo box has as default\n   */\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.object,\n  ]),\n  /**\n   * Value that the combo box has as default\n   */\n  options: PropTypes.array,\n  /**\n   * Whether the combo box is clearable or not\n   */\n  clearable: PropTypes.bool,\n  /**\n   * Whether the combo box is searchable or not. Set to false makes the input non-editable\n   */\n  searchable: PropTypes.bool,\n  /**\n   * Whether the combo box is disabled or not\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Placeholder for the combo box\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Displays a Loading Indicator in the menu\n   */\n  loading: PropTypes.bool,\n  valueProperty: PropTypes.string,\n  labelProperty: PropTypes.string,\n  /**\n   * Whether the combo box menu is open or not\n   */\n  menuIsOpen: PropTypes.bool,\n  /**\n   * Whether to show the combo box menu inline or not\n   */\n  inlineMenu: PropTypes.bool,\n  /**\n   * Message to show once there aren't any options\n   */\n  noOptionsMessage: PropTypes.func,\n  /**\n   * Components you can add to the combo box\n   */\n  measureRef: PropTypes.func,\n  /**\n   * Whether the combo box is read only or not\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Whether the combo box can be expanded the menu to container or not\n   */\n  expandMenuToContainer: PropTypes.bool,\n  /**\n   * Allow have options larger than his container\n   */\n  expandMenuOutsideContainer: PropTypes.bool,\n  /**\n   * Custom combo box menu item options\n   */\n  customMenuItemOptions: PropTypes.object,\n  /**\n   * Props to enable multiple free solo combobox\n   */\n  multipleFreeSoloProps: PropTypes.object,\n  /**\n   * Whether the combo box is has value to return or not\n   */\n  returnValue: PropTypes.bool,\n  hideSelectedOptions: PropTypes.bool,\n  maxOptions: PropTypes.number,\n  /**\n   * Custom method to filter whether an option should be displayed in the menu\n   */\n  filterOption: PropTypes.func,\n  isFreeSolo: PropTypes.bool,\n  formatCreateLabel: PropTypes.func,\n  createOptionPosition: PropTypes.string,\n  onClickDropdownIndicator: PropTypes.func,\n  /**\n   * Object with custom components for react-select\n   */\n  components: PropTypes.object,\n  componentsStyle: PropTypes.object,\n  contentRect: PropTypes.object,\n  zIndex: PropTypes.number,\n  keepTypedValue: PropTypes.bool,\n};\n\nexport default withSelectStringValueConverter(\n  withContentRect('bounds')(DSComboBox2),\n);\n","const letterFactor = 5.7;\nconst fixedSpace = 45;\nexport function calculateWidth(options) {\n  const longest = options.reduce((a, b) => {\n    if (a && a.label && b && b.label)\n      return a.label.length > b.label.length ? a : b;\n    return 0;\n  });\n  if (longest && longest.label && longest.label.length) {\n    // if (longest.label.length > fixedSpace) return fixedSpace * letterFactor\n    return longest.label.length * letterFactor + fixedSpace;\n  }\n  return 0;\n}\n","import React from 'react';\nimport DSComboBox from '@elliemae/ds-basic/dscombobox';\n\nconst options = [\n  { value: 'Borrower', label: 'Borrower' },\n  { value: 'Co-Borrower', label: 'Co-Borrower' },\n  { value: 'Both', label: 'Both' },\n];\n\nconst OwnerComboBox = ({ value, onValue, rowData }) => {\n  return (\n    <DSComboBox\n      autoFocus\n      menuIsOpen\n      onBlur={() => onValue(value === 'Yes')}\n      onChange={(val) => onValue(val, rowData)}\n      options={options}\n      value={value === 'Yes'}\n    />\n  );\n};\n\nconst OverTimeComboBox = ({ value, onValue, rowData }) => {\n  return (\n    <DSComboBox\n      autoFocus\n      menuIsOpen\n      onBlur={() => onValue(value === 'Yes')}\n      onChange={(val) => onValue(val, rowData)}\n      options={options}\n      value={value === 'Yes'}\n    />\n  );\n};\n\nexport default [\n  {\n    property: 'name',\n    label: 'Name',\n    editable: true,\n    sortable: true,\n    resizable: true,\n  },\n  {\n    property: 'owner',\n    label: 'Owner',\n    editable: true,\n    resizable: true,\n    sortable: true,\n    customEditor: OwnerComboBox,\n  },\n  {\n    property: 'salary',\n    label: 'Salary',\n    editable: true,\n    searchable: true,\n    sortable: true,\n    resizable: true,\n  },\n  {\n    property: 'monthly',\n    label: 'Monthly',\n    editable: true,\n    sortable: true,\n    resizable: true,\n  },\n  {\n    property: 'overtime',\n    label: 'Overtime',\n    editable: true,\n    resizable: true,\n    customEditor: OverTimeComboBox,\n  },\n];\n","/* eslint-disable */\nimport createIcon from './utils/createIcon';\n\nexport default createIcon({\n  paths: [\n    'M9.496 12c-.828 0-1.5-.672-1.5-1.5S8.668 9 9.496 9s1.5.672 1.5 1.5-.672 1.5-1.5 1.5zM9.496 7c-.828 0-1.5-.672-1.5-1.5S8.668 4 9.496 4s1.5.672 1.5 1.5-.672 1.5-1.5 1.5zM9.496 17c-.828 0-1.5-.672-1.5-1.5s.672-1.5 1.5-1.5 1.5.672 1.5 1.5-.672 1.5-1.5 1.5z',\n  ],\n  height: 20,\n  width: 20,\n});\n","import React, { cloneElement, useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { addOrRemove, runAll } from '@elliemae/ds-utilities/utils';\nimport useDerivedStateFromProps from '@elliemae/ds-utilities/hooks/useDerivedStateFromProps';\n\nexport function useCheckableGroup({\n  children,\n  active: activeProp,\n  multi,\n  onCheck = () => null,\n}) {\n  const [active, setActive] = useDerivedStateFromProps(activeProp);\n\n  const handleCheck = ({ target: { value } }, item) => {\n    setActive(prevActive => {\n      const nextActive = multi ? addOrRemove(prevActive, value) : value;\n      onCheck(nextActive, item);\n      return nextActive;\n    });\n  };\n\n  return React.Children.map(children, child => {\n    const { props } = child;\n    const checked = Array.isArray(active)\n      ? active.indexOf(props.name) !== -1\n      : active === props.name;\n\n    return cloneElement(child, {\n      ...props,\n      checked,\n      onClick: runAll(handleCheck, props.onClick),\n    });\n  });\n}\n\nfunction CheckableGroup({\n  active = [],\n  multi = false, // checkbox or radio\n  children,\n}) {\n  return useCheckableGroup({ active, multi, children });\n}\n\nCheckableGroup.propTypes = {\n  /* The item (if multi false) or items (if multi true) selected */\n  active: PropTypes.arrayOf(PropTypes.string),\n  /* Whether is multi select or not */\n  multi: PropTypes.bool,\n  /* Handler when a user checks an item */\n  onCheck: PropTypes.func,\n};\n\nexport default CheckableGroup;\n","/* eslint-disable */\nimport createIcon from './utils/createIcon';\n\nexport default createIcon({\n  paths: [\n    'M18.869 19.162l-5.943-6.484c1.339-1.401 2.075-3.233 2.075-5.178 0-2.003-.78-3.887-2.197-5.303S9.504 0 7.501 0 3.614.78 2.198 2.197.001 5.497.001 7.5s.78 3.887 2.197 5.303S5.498 15 7.501 15c1.726 0 3.362-.579 4.688-1.645l5.943 6.483a.497.497 0 0 0 .369.162.4997.4997 0 0 0 .369-.837l-.001-.001zM1 7.5C1 3.916 3.916 1 7.5 1S14 3.916 14 7.5 11.084 14 7.5 14 1 11.084 1 7.5z',\n  ],\n  height: 20,\n  width: 20,\n});\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { debounce } from '@elliemae/ds-utilities/utils';\n\nconst withSearchable = (WrappedComponent) => {\n  class Searchable extends Component {\n    debouncedSearch = debounce(this.handleSearch, 200);\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        value: props.value,\n      };\n      this.handleSearch = this.handleSearch.bind(this);\n      this.handleKeyUp = this.handleKeyUp.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n      this.buttonRef = React.createRef();\n    }\n\n    static getDerivedStateFromProps(nextProps, { prevPropValue }) {\n      if (nextProps.value !== prevPropValue) {\n        return {\n          value: nextProps.value,\n          prevPropValue: nextProps.value,\n        };\n      }\n      return null;\n    }\n\n    handleKeyUp(e) {\n      const { onKeyUp, searchOnEnter } = this.props;\n      const { key } = e;\n      if (searchOnEnter && key === 'Enter') {\n        this.handleSearch();\n      }\n      onKeyUp(e);\n    }\n\n    handleSearch() {\n      const { onSearch, property, clearOnSearch, searchOnEnter } = this.props;\n      const { value } = this.state;\n\n      if (clearOnSearch) this.setState({ value: '' });\n      if (searchOnEnter && !value) return;\n      onSearch({\n        query: { [property]: value },\n        property,\n        value,\n      });\n    }\n\n    handleChange({ target }) {\n      const { value } = target;\n      const { searchOnEnter, onChange } = this.props;\n      onChange(value);\n      this.setState({ value }, () => {\n        if (!searchOnEnter) this.debouncedSearch();\n      });\n    }\n\n    render() {\n      const { value } = this.state;\n      const { containerProps, ...rest } = this.props;\n\n      return (\n        <WrappedComponent\n          {...rest}\n          buttonRef={this.buttonRef}\n          containerProps={containerProps}\n          onChange={this.handleChange}\n          onKeyUp={this.handleKeyUp}\n          onSearch={this.handleSearch}\n          value={value}\n        />\n      );\n    }\n  }\n\n  Searchable.defaultProps = {\n    onChange: () => null,\n    onSearch: () => null,\n    onKeyUp: () => null,\n    property: 'all',\n    searchOnEnter: true,\n    clearOnSearch: false,\n    containerProps: {},\n  };\n\n  Searchable.propTypes = {\n    containerProps: PropTypes.shape({}),\n    onChange: PropTypes.func,\n    onSearch: PropTypes.func,\n    onKeyUp: PropTypes.func,\n    property: PropTypes.string,\n    searchOnEnter: PropTypes.bool,\n    clearOnSearch: PropTypes.bool,\n    value: PropTypes.string,\n  };\n\n  return Searchable;\n};\n\nexport default withSearchable;\n","import React from 'react';\n\nexport default React.createContext();\n","import React from 'react';\nimport { FixedSizeList as List } from 'react-window';\nimport useHeightByAmountOfItems from './utils/useHeightByAmountOfItems';\n\nconst MenuItem = ({ data, index, style }) => (\n  <div key={index} style={style}>\n    {data[index]}\n  </div>\n);\n\n// eslint-disable-next-line no-unused-vars\nfunction resolveComputation(items, cb, timeout = 1000) {\n  return () =>\n    new Promise(resolve => {\n      const doResolve = result => {\n        cb(result);\n        resolve(result);\n      };\n      let result = 0;\n      const timer = setTimeout(() => doResolve(result), timeout);\n      items.forEach(option => {\n        result =\n          option.props.label.length > result\n            ? option.props.label.length\n            : result;\n      });\n\n      clearTimeout(timer);\n      doResolve(result);\n    });\n}\n\nexport default function VirtualMenuList({\n  items,\n  itemHeight = 32,\n  amountItemsInWindow = 5,\n  width,\n  height,\n}) {\n  const computedListHeight = useHeightByAmountOfItems({\n    amountItems: amountItemsInWindow,\n    itemHeight,\n    items,\n  });\n\n  return (\n    <List\n      height={height || computedListHeight}\n      itemCount={items.length}\n      itemData={items}\n      itemSize={itemHeight}\n      width={width}\n    >\n      {MenuItem}\n    </List>\n  );\n}\n","import { useMemo } from 'react';\n\nconst calculateHeight = (itemHeight, amountItemsInWindow, itemsLength) => {\n  const realAmountItemsInWindow =\n    itemsLength < amountItemsInWindow ? itemsLength : amountItemsInWindow;\n  return itemHeight * realAmountItemsInWindow;\n};\n\nexport default function useHeightByAmountOfItems({\n  itemHeight,\n  amountItems,\n  items,\n}) {\n  const calculatedHeight = useMemo(\n    () => calculateHeight(itemHeight, amountItems, items.length),\n    [amountItems, items],\n  );\n\n  return calculatedHeight;\n}\n","import React, { useEffect, useMemo, useState, useRef, useContext } from 'react';\nimport DSSearchBox from '@elliemae/ds-basic/form/SearchBox';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport { focusGroupManagerHoc } from '@elliemae/ds-shared/FocusGroup';\nimport PropTypes from 'prop-types';\nimport VirtualMenuList from '../VirtualMenuList';\nimport MenuContext from '../MenuContext';\n\nconst SearchBoxWrapper = aggregatedClasses('div')(\n  'menu-search-group',\n  'search-wrapper',\n);\nconst NoOptionsWrapper = aggregatedClasses('div')(\n  'menu-search-group',\n  'no-options',\n);\n\nfunction SearchableGroup({\n  children,\n  amountItemsInWindow = 5,\n  searchTerm: searchTermProp = '',\n  noOptionsText = 'No options',\n  height,\n  width,\n  focusOnOpen = false,\n}) {\n  const searchRef = useRef(null);\n  const [searchTerm, setSearchTerm] = useState(searchTermProp);\n\n  useEffect(() => {\n    if (searchRef.current) searchRef.current.focus();\n  }, []);\n\n  const { visible } = useContext(MenuContext) || {};\n\n  useEffect(() => {\n    if (focusOnOpen && visible) {\n      setTimeout(() => {\n        if (searchRef.current) searchRef.current.focus();\n      }, 0);\n    }\n  }, [focusOnOpen, visible]);\n\n  const filteredChildren = useMemo(\n    () =>\n      children.filter(\n        child =>\n          !searchTerm ||\n          child.props.label.toLowerCase().startsWith(searchTerm.toLowerCase()),\n      ),\n    [children, searchTerm],\n  );\n\n  return (\n    <>\n      <SearchBoxWrapper>\n        <DSSearchBox\n          innerRef={searchRef}\n          onSearch={({ value }) => setSearchTerm(value)}\n          searchOnEnter={false}\n          showIcon={false}\n          value={searchTerm}\n        />\n      </SearchBoxWrapper>\n      {!filteredChildren.length && (\n        <NoOptionsWrapper>{noOptionsText}</NoOptionsWrapper>\n      )}\n      <VirtualMenuList\n        amountItemsInWindow={amountItemsInWindow}\n        height={height}\n        items={filteredChildren}\n        width={width}\n      />\n    </>\n  );\n}\n\nSearchableGroup.propTypes = {\n  /** The amount of items that are going to be rendered in the group */\n  amountItemsInWindow: PropTypes.number,\n  /** A search term */\n  searchTerm: PropTypes.string,\n  /** Text to show when there's no options to show */\n  noOptionsText: PropTypes.string,\n};\n\nexport default focusGroupManagerHoc(SearchableGroup);\n","import React from 'react';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport DSSeparator from '@elliemae/ds-basic/Separator';\nimport styled from 'styled-components';\n\nconst blockName = 'menu-separator';\nconst Li = styled.li`\n  display: flex;\n  align-items: flex-start;\n  flex-direction: column;\n`;\n\nconst Title = aggregatedClasses('h5')(blockName, 'title');\nconst MenuSeparator = ({ title, showSeparator = true }) => (\n  <Li>\n    {showSeparator && <DSSeparator />}\n    {title && <Title>{title}</Title>}\n  </Li>\n);\n\nexport default MenuSeparator;\n","/* eslint-disable */\nimport createIcon from './utils/createIcon';\n\nexport default createIcon({\n  paths: ['M7.5 12.875L4.625 10l-.875.875 3.75 3.75 8.75-8.75L15.375 5z'],\n  height: 20,\n  width: 20,\n});\n","import React from 'react';\nimport CheckableGroup from '@elliemae/ds-shared/CheckableGroup';\n\nfunction CheckboxGroup(props) {\n  return <CheckableGroup {...props} multi />;\n}\n\nCheckboxGroup.propTypes = {};\n\nexport default CheckboxGroup;\n","import React from 'react';\nimport CheckableGroup from '@elliemae/ds-shared/CheckableGroup';\n\nfunction RadioGroup(props) {\n  return <CheckableGroup {...props} multi={false} />;\n}\n\nRadioGroup.propTypes = {};\n\nexport default RadioGroup;\n","/* eslint-disable */\nimport createIcon from './utils/createIcon';\n\nexport default createIcon({\n  paths: [\n    'M12 10.5a.503.503 0 0 0-.109-.313l-4-5a.5013.5013 0 0 0-.703-.078c-.214.173-.25.488-.078.703l3.75 4.688-3.75 4.688c-.172.218-.136.531.078.703.216.172.53.138.703-.078l4-5A.501.501 0 0 0 12 10.5z',\n  ],\n  height: 20,\n  width: 20,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DSInput from '@elliemae/ds-basic/form/Input';\n\nconst DSTextBox = ({\n  containerProps = {},\n  autoFocus = false,\n  disabled = false,\n  maxLength = 255,\n  minLength = 0,\n  fluidWidth = false,\n  placeholder,\n  value = '',\n  hasError = false,\n  readOnly = false,\n  innerRef = null,\n  type = 'text',\n  min = undefined,\n  max = undefined,\n  clearable = false,\n  leftComponent = null,\n  rightComponent = null,\n  required = false,\n  variant,\n  ...otherProps\n}) => (\n  <DSInput\n    {...otherProps}\n    aria-label={otherProps['aria-label'] || 'Text Box'}\n    autoFocus={autoFocus}\n    clearable={clearable}\n    containerProps={containerProps}\n    disabled={disabled}\n    fluidWidth={fluidWidth}\n    hasError={hasError}\n    innerRef={innerRef}\n    leftComponent={leftComponent}\n    max={max}\n    maxLength={maxLength}\n    min={min}\n    minLength={minLength}\n    placeholder={placeholder}\n    readOnly={readOnly}\n    required={required}\n    rightComponent={rightComponent}\n    role=\"textbox\"\n    type={type}\n    value={value}\n    variant={variant}\n  />\n);\n\nDSTextBox.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /**\n   * Whether the text box uses auto focus or not\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Whether the text box is disabled or not\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Max length for the text box\n   */\n  maxLength: PropTypes.number,\n  /**\n   * Min length for the text box\n   */\n  minLength: PropTypes.number,\n  /**\n   * Make the content of the text box fit the container or not\n   */\n  fluidWidth: PropTypes.bool,\n  /**\n   * Placeholder for the text box\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Default value once the component is initialized\n   */\n  value: PropTypes.string,\n  /**\n   * Whether the text box has error or not\n   */\n  hasError: PropTypes.bool,\n  /**\n   * Whether the text box is read only or not\n   */\n  readOnly: PropTypes.bool,\n  min: PropTypes.number,\n  max: PropTypes.number,\n  /**\n   * Whether the text box is clearable or not\n   */\n  clearable: PropTypes.bool,\n  /**\n   * Component to be added at the left side of the text box\n   */\n  leftComponent: PropTypes.element,\n  /**\n   * Component to be added at the right side of the text box\n   */\n  rightComponent: PropTypes.element,\n  /**\n   * Whether the text box is required or not\n   */\n  required: PropTypes.bool,\n  /**\n   * [\n   *  'variant-default',\n   *  'variant-focus',\n   *  'variant-active',\n   *  'variant-disabled',\n   * ]\n   */\n  variant: PropTypes.string,\n};\n\nexport default DSTextBox;\n","import React, { useMemo } from 'react';\nimport { useCheckableGroup } from '@elliemae/ds-shared/CheckableGroup';\nimport SearchableGroup from './SearchableGroup';\nimport { menuItemFactory } from './menuItemFactory';\nimport VirtualMenuList from '../VirtualMenuList';\n\nconst noop = () => null;\n\nfunction SelectionGroup({\n  multi = false,\n  searchable = false,\n  focusOnOpen = false,\n  onSelect = noop,\n  children,\n  items = undefined,\n  active = multi ? [] : '',\n  width,\n  height,\n}) {\n  const renderedItems = useMemo(\n    () =>\n      items &&\n      items.map(item => {\n        const Component = menuItemFactory(multi ? 'checkbox' : 'radio');\n        return (\n          <Component\n            {...item}\n            key={item.name || item.id || item.key}\n            item={item}\n            name={item.id || item.name}\n          />\n        );\n      }),\n    [items],\n  );\n  const decoratedGroupChildren = useCheckableGroup({\n    children: renderedItems || children,\n    multi,\n    active,\n    onCheck: onSelect,\n  });\n\n  if (searchable) {\n    return (\n      <SearchableGroup\n        focusOnOpen={focusOnOpen}\n        height={height}\n        items={items}\n        width={width}\n      >\n        {decoratedGroupChildren}\n      </SearchableGroup>\n    );\n  }\n  return (\n    <VirtualMenuList\n      height={height}\n      items={decoratedGroupChildren}\n      width={width}\n    />\n  );\n}\n\nexport default SelectionGroup;\n","import React from 'react';\nimport DSCheckbox from '@elliemae/ds-basic/form/Checkbox';\nimport MenuItemCheckable from './MenuItemCheckable';\n\nfunction MenuItemCheckbox({ checked, ...rest }) {\n  return (\n    <MenuItemCheckable\n      {...rest}\n      leftAddon={<DSCheckbox checked={checked} />}\n      role=\"menuitemcheckbox\"\n    />\n  );\n}\n\nexport default MenuItemCheckbox;\n","/* eslint-disable import/no-cycle */\nimport React from 'react';\nimport { isFunction } from '@elliemae/ds-utilities/utils';\n\nimport Separator from './Separator';\nimport MenuItem from './MenuItem';\nimport SubMenu from './SubMenu';\nimport SelectionGroup from './SelectionGroup';\nimport MenuItemCheckbox from './MenuItemCheckbox';\nimport MenuItemRadio from './MenuItemRadio';\n\nconst itemTypes = {\n  separator: Separator,\n  menuitem: MenuItem,\n  radio: MenuItemRadio,\n  checkbox: MenuItemCheckbox,\n  submenu: SubMenu,\n  'selection-group': SelectionGroup,\n};\n\nconst fallback = {\n  SelectionGroup: 'selection-group',\n};\n\nexport function menuItemFactory(\n  type = '',\n  items,\n  defaultItem = itemTypes.menuitem,\n) {\n  const itemsObject = items || itemTypes;\n  const parsedType = fallback[type] || type.toLowerCase();\n  return itemsObject[parsedType] || defaultItem;\n}\n\nexport function renderMenuItems(options, factory = menuItemFactory) {\n  return options.map((option, index) => {\n    if (isFunction(option.renderer)) {\n      return option.renderer({\n        key: option.id,\n        item: option,\n      });\n    }\n    const ItemComponent = factory(option.type);\n    const children =\n      option.subItems && renderMenuItems(option.subItems, factory);\n    return (\n      <ItemComponent\n        {...option}\n        key={option.id || index}\n        item={option}\n        onClick={null}\n        onMouseDown={option.onClick}\n        // onClick callback called in onMouseDown due to events order issue\n      >\n        {children}\n      </ItemComponent>\n    );\n  });\n}\n","/* eslint-disable import/no-cycle */\nimport React, { useRef, useMemo, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { omit } from 'lodash';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport { mergeRefs } from '@elliemae/ds-utilities/system';\nimport { useFocusGroupItem } from '@elliemae/ds-shared/FocusGroup';\nimport { runAll } from '@elliemae/ds-utilities/utils';\nimport DSTruncatedTooltipText from '@elliemae/ds-basic/TruncatedTooltipText';\nimport { renderMenuItems } from './menuItemFactory';\nimport SubMenu from './SubMenu';\nimport MenuContext from '../MenuContext';\n\nconst noop = () => null;\n\nconst blockName = 'menu-item';\n\nconst Content = aggregatedClasses('div')(blockName, 'content');\nconst Addon = aggregatedClasses('div')(\n  blockName,\n  'addon',\n  ({ empty, fixedItem }) => ({ empty, fixedItem }),\n);\n\nconst renderAddon = (addon, fixedItem, addonId) => (\n  <Addon key={addonId} classProps={{ fixedItem }}>\n    {addon}\n  </Addon>\n);\n\nconst renderAddons = (addons, fixedItem) =>\n  Array.isArray(addons)\n    ? addons.map(renderAddon)\n    : renderAddon(addons, fixedItem);\n\nconst Wrapper = aggregatedClasses('li')(\n  blockName,\n  null,\n  ({ disabled, disabledAddonInactive, customRenderer, fixedItem, type }) => ({\n    disabled,\n    disabledAddonInactive,\n    customRenderer,\n    fixedItem,\n    [`menu-type-${type}`]: type,\n  }),\n);\nconst calculateSize = (length = 0) => {\n  if (length > 45) return 45 * 7;\n  return length * 7;\n};\nfunction MenuItem(props) {\n  const {\n    innerRef,\n    as = 'li',\n    role = 'menuitem',\n    leftAddon = null,\n    rightAddon = undefined,\n    disabledAddonInactive = undefined,\n    label = undefined,\n    children,\n    tabIndex = -1,\n    onKeyDown = noop,\n    fixedItem = false,\n    noAddon,\n    disabled = false,\n    customRenderer,\n    maxOption,\n    closeMenu,\n    style,\n    ...otherProps\n  } = props;\n\n  const menuCxt = useContext(MenuContext);\n  const ref = useRef(null);\n  useFocusGroupItem(ref);\n  if (otherProps.subItems) {\n    return (\n      <SubMenu {...props} closeMenu={menuCxt.closeMenu}>\n        {renderMenuItems(otherProps.subItems)}\n      </SubMenu>\n    );\n  }\n\n  const wrapperProps = useMemo(() => omit(otherProps, ['icon']), [otherProps]);\n\n  const onClick = (...args) => {\n    if (wrapperProps.onClick) wrapperProps.onClick(...args);\n    if (wrapperProps.closeOnClick && menuCxt.closeMenu) {\n      menuCxt.closeMenu(...args);\n    }\n  };\n\n  return (\n    <Wrapper\n      as={as}\n      classProps={{\n        disabled,\n        disabledAddonInactive,\n        customRenderer,\n        fixedItem,\n        type: otherProps.type,\n      }}\n      id={otherProps.id}\n      innerRef={\n        otherProps.type !== 'disabled' ? mergeRefs(innerRef, ref) : innerRef\n      }\n      onKeyDown={\n        !fixedItem &&\n        runAll(e => {\n          if (e.key === ' ' || e.key === 'Enter') {\n            e.preventDefault();\n            e.target.dispatchEvent(\n              new MouseEvent('click', {\n                view: window,\n                bubbles: true,\n                cancelable: false,\n              }),\n            );\n          }\n        }, onKeyDown)\n      }\n      role={role}\n      style={style}\n      tabIndex={tabIndex}\n      {...wrapperProps}\n      onClick={onClick}\n    >\n      {!noAddon && renderAddons(leftAddon, fixedItem)}\n      {label && (\n        <Content\n          style={\n            maxOption > 0\n              ? {\n                  width: `${calculateSize(maxOption)}px`,\n                  maxWidth: `${calculateSize(maxOption)}px`,\n                }\n              : undefined\n          }\n        >\n          <DSTruncatedTooltipText value={label} />\n        </Content>\n      )}\n      {customRenderer}\n      {rightAddon && renderAddons(rightAddon)}\n      {children}\n    </Wrapper>\n  );\n}\n\nMenuItem.propTypes = {\n  /** Renders the MenuItem with a specific html element */\n  as: PropTypes.element,\n  /** Renders the passed element to the left */\n  leftAddon: PropTypes.element,\n  /** Renders the passed element to the right */\n  rightAddon: PropTypes.element,\n  /** Label for the menu item */\n  label: PropTypes.string,\n};\n\nexport default MenuItem;\n","/* eslint-disable import/no-cycle */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Checkmark from '@elliemae/ds-icons/Checkmark';\nimport { runAll } from '@elliemae/ds-utilities/utils';\nimport MenuItem from './MenuItem';\n\n// TODO: where to move this?\nfunction useCheckable({ checked }) {\n  return {\n    checked,\n    'aria-checked': checked,\n  };\n}\n\n/**\n * Reuses the same props as the MenuItem\n *\n * @param root0\n * @param root0.role\n * @param root0.checked\n * @param root0.name\n * @param root0.checkIcon\n * @param root0.children\n * @param root0.leftAddon\n * @param root0.item\n */\nfunction MenuItemCheckable({\n  role = 'menuitemcheckbox',\n  checked = false,\n  name = '',\n  checkIcon = <Checkmark color={['brand-primary', 600]} />,\n  children,\n  leftAddon,\n  item = undefined,\n  ...otherProps\n}) {\n  const checkableProps = useCheckable({ checked, name });\n  const handleClick = () =>\n    runAll(otherProps.onClick, checkableProps.onClick)(\n      { target: { value: name, checked } },\n      item,\n    );\n\n  const checkAddon =\n    leftAddon ||\n    (checkableProps.checked ? (\n      <div className=\"checkable-mark\">{checkIcon}</div>\n    ) : (\n      <div />\n    ));\n  return (\n    <MenuItem\n      {...item}\n      {...otherProps}\n      {...checkableProps}\n      customRenderer={\n        item && item.customRenderer ? item.customRenderer : () => {}\n      }\n      items={otherProps.subItems}\n      leftAddon={checkAddon}\n      onClick={handleClick}\n      role={role}\n    />\n  );\n}\n\nMenuItemCheckable.propTypes = {\n  /** Whether the item is checked or not */\n  checked: PropTypes.bool,\n  /** A custom item when the item is checked */\n  checkIcon: PropTypes.element,\n};\nexport default MenuItemCheckable;\n","import React from 'react';\nimport MenuItemCheckable from './MenuItemCheckable';\n\nfunction MenuItemRadio(props) {\n  return <MenuItemCheckable {...props} role=\"menuitemradio\" />;\n}\n\nMenuItemRadio.propTypes = {\n  ...MenuItemCheckable.propTypes,\n};\n\nexport default MenuItemRadio;\n","/* eslint-disable max-lines */\n/* eslint-disable react/prop-types */\n/* eslint-disable import/no-cycle */\nimport React, { useContext, useEffect, useMemo, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport { animated } from 'react-spring/web.cjs';\nimport { useHiddenTransition } from '@elliemae/ds-basic/Hidden';\nimport { useOnClickOutside } from '@elliemae/ds-utilities/hooks';\nimport { mergeRefs } from '@elliemae/ds-utilities/system';\nimport {\n  focusGroupManagerHoc,\n  FocusGroupContext,\n} from '@elliemae/ds-shared/FocusGroup';\nimport MenuItemRadio from './MenuItems/MenuItemRadio';\nimport MenuItemCheckbox from './MenuItems/MenuItemCheckbox';\nimport CheckboxGroup from './MenuItems/CheckboxGroup';\nimport RadioGroup from './MenuItems/RadioGroup';\nimport Separator from './MenuItems/Separator';\nimport MenuItem from './MenuItems/MenuItem';\nimport SubMenu from './MenuItems/SubMenu';\nimport SearchableGroup from './MenuItems/SearchableGroup';\nimport SelectionGroup from './MenuItems/SelectionGroup';\nimport { renderMenuItems, menuItemFactory } from './MenuItems/menuItemFactory';\nimport MenuContext from './MenuContext';\n\nconst RESPONSIVE_HEIHGT_MARGIN = 120;\n\nconst blockName = 'menu';\n\nconst noop = () => {};\n\nconst MenuComponent = aggregatedClasses('div')(\n  blockName,\n  '',\n  ({ menuComboBox, type }) => ({\n    'menu-combo-box': menuComboBox,\n    [`type-${type}`]: type,\n  }),\n);\n\n/**\n * todo: -- IDEA -- each menu could have an overlay based on an overlay stack context so we can\n * capture the context of the clicks on very nested components\n */\n\nconst isChildOfType = (child, type) => child.type.name === type;\n\nfunction DSMenu({\n  containerProps = {},\n  innerRef,\n  as: MenuTag = animated.ul,\n  children = undefined,\n  onClickOutside = noop,\n  // handlers from hidden\n  visible = undefined,\n  focusOnOpen = false,\n  maxOption = 0,\n  style = {},\n  minWidth = undefined,\n  maxWidth = undefined,\n  closeMenu,\n  responsiveHeight = false,\n  ...otherProps\n}) {\n  const menuRef = useRef(null);\n  const { focusFirst } = useContext(FocusGroupContext);\n  const { destroyed, ...hiddenProps } = useHiddenTransition({ visible, style });\n\n  // force no addon to the children if the menu doesn't have any item with leftAddon like SelectionGroup\n  const nextChildren = useMemo(() => {\n    const forceLeftAddon = React.Children.toArray(children).some(\n      (child) =>\n        isChildOfType(child, 'SelectionGroup') ||\n        isChildOfType(child, 'MenuItemCheckbox') ||\n        isChildOfType(child, 'MenuItemRadio') ||\n        child.props.leftAddon,\n    );\n\n    return React.Children.map(\n      children,\n      (child) =>\n        child &&\n        React.cloneElement(child, {\n          ...child.props,\n          noAddon: !forceLeftAddon ? true : undefined,\n          maxOption,\n          closeMenu,\n        }),\n    );\n  }, [children]);\n\n  useOnClickOutside(menuRef, onClickOutside);\n\n  useEffect(() => {\n    if (focusOnOpen && visible) {\n      setTimeout(() => {\n        focusFirst();\n      }, 0);\n    }\n  }, [visible, focusOnOpen]);\n  // todo: find out a better approach to this\n  return !hiddenProps.destroyed ? (\n    <MenuContext.Provider value={{ visible, closeMenu }}>\n      <MenuComponent\n        data-testid=\"em-ds-menu\"\n        {...containerProps}\n        as={MenuTag}\n        classProps={{ ...(otherProps.classProps || {}), type: otherProps.type }}\n        innerRef={mergeRefs(innerRef, menuRef)}\n        role=\"menu\"\n        {...otherProps}\n        {...hiddenProps}\n      >\n        {/* eslint-disable indent */}\n        <div\n          className=\"menu-component-internal-wrapper\"\n          style={{\n            ...style,\n            minWidth,\n            maxWidth,\n            ...(responsiveHeight\n              ? {\n                  overflowY: 'scroll',\n                  maxHeight: responsiveHeight\n                    ? `${window.innerHeight - RESPONSIVE_HEIHGT_MARGIN}px`\n                    : undefined,\n                }\n              : {}),\n          }}\n        >\n          {/* eslint-enable indent */}\n          {nextChildren}\n        </div>\n      </MenuComponent>\n    </MenuContext.Provider>\n  ) : null;\n}\n\nconst WrappedMenu = focusGroupManagerHoc(DSMenu, { loop: true });\n\nDSMenu.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /** Renders the menu with a specific html element */\n  as: PropTypes.element,\n  /** Handler when a user clicks outside the menu */\n  onClickOutside: PropTypes.func,\n  /** Whether the menu is visible or not */\n  visible: PropTypes.bool,\n  /** When set to true, it's going to focus the first item */\n  focusOnOpen: PropTypes.bool,\n  /** Customize menu minWidth. Can be undefined or 'number' */\n  minWidth: PropTypes.number,\n  /** Customize menu maxWidth. Can be undefined or 'number' */\n  maxWidth: PropTypes.number,\n};\n\n// todo: add a handler to get this kind of exports for documentation\nWrappedMenu.Item = MenuItem;\nWrappedMenu.ItemCheckbox = MenuItemCheckbox;\nWrappedMenu.ItemRadio = MenuItemRadio;\nWrappedMenu.SubMenu = SubMenu;\nWrappedMenu.Separator = Separator;\nWrappedMenu.CheckboxGroup = CheckboxGroup;\nWrappedMenu.RadioGroup = RadioGroup;\nWrappedMenu.SearchableGroup = SearchableGroup;\nWrappedMenu.SelectionGroup = SelectionGroup;\n\nexport { menuItemFactory, renderMenuItems };\nexport default WrappedMenu;\n","/* eslint-disable import/no-cycle */\nimport React, { useRef } from 'react';\nimport DSButton, { BUTTON_VARIANT } from '@elliemae/ds-basic/Button';\nimport ChevronRight from '@elliemae/ds-icons/ChevronSmallRight';\nimport VerticalElipsis from '@elliemae/ds-icons/MoreOptionsVert';\nimport { useFocusGroupItem } from '@elliemae/ds-shared/FocusGroup';\nimport DSPopper from '@elliemae/ds-basic/Popper';\nimport { useHiddenController } from '@elliemae/ds-basic/Hidden';\nimport Menu from '../Menu';\nimport MenuItem from './MenuItem';\n\nfunction SubMenu({\n  noAddon,\n  leftAddon = undefined,\n  label = undefined,\n  interactionType = 'hover',\n  children: subitems,\n  rightAddonType,\n  disabledAddonInactive,\n  checkableProps = {},\n  customRenderer,\n  onClick,\n  closeMenu,\n  id,\n}) {\n  const itemRef = useRef(null);\n  const focusOnOpen = useRef(false);\n  const { visible = false, onShow, onHide } = useHiddenController(undefined, {\n    interaction: 'click',\n  });\n\n  const { focusItemByNode } = useFocusGroupItem();\n  // todo: create a menu state to handle all related menu things\n  const handleShowSubItemsWithMouse = e => {\n    e.stopPropagation();\n    onShow();\n    focusOnOpen.current = true;\n  };\n  const handleShowWithMouse = e => {\n    if (onClick) onClick(e);\n  };\n  const handleShowWithMouseHover = () => {\n    onShow();\n    focusOnOpen.current = false;\n  };\n\n  const handleShowWithKeyboard = () => {\n    onShow();\n    focusOnOpen.current = true;\n  };\n\n  const hoverHandlers =\n    interactionType === 'hover'\n      ? {\n          onMouseEnter: handleShowWithMouseHover,\n          onMouseLeave: onHide,\n        }\n      : {\n          onClick: handleShowWithMouse,\n        };\n\n  const rightAddon =\n    rightAddonType === 'elipsis' ? (\n      <DSButton\n        aria-label=\"vertical-elipsis\"\n        buttonType=\"text\"\n        leftIcon={\n          <VerticalElipsis\n            className=\"submenu-arrow\"\n            color={['brand-primary', 600]}\n            size=\"s\"\n          />\n        }\n        onClick={e => handleShowSubItemsWithMouse(e)}\n        size=\"m\"\n        variant={BUTTON_VARIANT.DEFAULT}\n      />\n    ) : (\n      <ChevronRight\n        className=\"submenu-arrow\"\n        color={['brand-primary', 600]}\n        size=\"sm\"\n      />\n    );\n\n  return (\n    <>\n      <DSPopper\n        contentComponent={\n          <Menu\n            focusKeyBindings={{\n              ArrowLeft: [() => focusItemByNode(itemRef.current), 'exit'],\n            }}\n            focusOnOpen={focusOnOpen.current}\n            onExitFocusGroup={onHide}\n            {...hoverHandlers}\n            closeMenu={closeMenu}\n            visible={visible}\n          >\n            {subitems}\n          </Menu>\n        }\n        interactionType={interactionType}\n        isOpen={visible}\n        onOpen={opening => (opening ? onShow() : onHide())}\n        placement=\"right-start\"\n        showArrow={false}\n        triggerComponent={\n          <MenuItem\n            customRenderer={customRenderer}\n            disabledAddonInactive={disabledAddonInactive}\n            id={id}\n            innerRef={itemRef}\n            label={label}\n            leftAddon={leftAddon}\n            noAddon={noAddon}\n            {...hoverHandlers}\n            onKeyDown={e => {\n              if (\n                e.key === 'ArrowRight' ||\n                e.key === 'Enter' ||\n                e.keyCode === 32\n              ) {\n                handleShowWithKeyboard();\n              }\n            }}\n            rightAddon={rightAddon}\n            {...checkableProps}\n          />\n        }\n      />\n    </>\n  );\n}\n\nexport default SubMenu;\n","/* eslint-disable react/no-unused-state */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Search from '@elliemae/ds-icons/Search';\nimport DSButton from '@elliemae/ds-basic/Button';\nimport DSTextBox from '@elliemae/ds-basic/form/TextBox';\nimport withSearchable from './withSearchable';\n\nconst SearchBoxImpl = ({\n  containerProps,\n  placeholder,\n  className,\n  disabled,\n  disableButton,\n  innerRef,\n  showIcon,\n  style,\n  onChange,\n  onKeyUp,\n  onSearch,\n  onBlur,\n  readOnly,\n  value,\n  clearable,\n}) => (\n  <DSTextBox\n    className={className}\n    clearable={clearable}\n    containerProps={containerProps}\n    disabled={disabled}\n    innerRef={innerRef}\n    onChange={onChange}\n    onKeyUp={onKeyUp}\n    onBlur={onBlur}\n    placeholder={placeholder}\n    readOnly={readOnly}\n    rightComponent={\n      showIcon && (\n        <DSButton\n          disabled={disabled || disableButton}\n          buttonType=\"text\"\n          icon={<Search />}\n          iconSize=\"s\"\n          onClick={onSearch}\n        />\n      )\n    }\n    style={style}\n    value={value}\n  />\n);\n\nSearchBoxImpl.propTypes = {\n  containerProps: PropTypes.shape({}),\n  className: PropTypes.string,\n  innerRef: PropTypes.any,\n  style: PropTypes.objectOf(PropTypes.string),\n  placeholder: PropTypes.string,\n  onKeyUp: PropTypes.func,\n  onSearch: PropTypes.func,\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func,\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.object,\n  ]),\n  showIcon: PropTypes.bool,\n  disabled: PropTypes.bool,\n  disableButton: PropTypes.bool,\n  readOnly: PropTypes.bool,\n  clearable: PropTypes.bool,\n};\n\nexport default withSearchable(SearchBoxImpl);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SearchBoxImpl from './SearchBoxImpl';\n\nconst DSSearchBox = ({\n  containerProps = {},\n  innerRef = undefined,\n  className = '',\n  disabled = false,\n  disableButton = false,\n  searchIcon = 'search',\n  style = {},\n  property = 'all',\n  placeholder = 'Search all', // todo: i18nize this\n  searchOnEnter = true,\n  clearOnSearch = false,\n  onKeyUp = () => null,\n  onSearch = () => null,\n  onChange = () => null,\n  onBlur = () => null,\n  readOnly = false,\n  value = undefined,\n  showIcon = true,\n}) => (\n  <SearchBoxImpl\n    className={className}\n    clearOnSearch={clearOnSearch}\n    containerProps={containerProps}\n    disabled={disabled}\n    disableButton={disableButton}\n    innerRef={innerRef}\n    onKeyUp={onKeyUp}\n    onSearch={onSearch}\n    onChange={onChange}\n    onBlur={onBlur}\n    placeholder={placeholder}\n    property={property}\n    readOnly={readOnly}\n    searchIcon={searchIcon}\n    searchOnEnter={searchOnEnter}\n    showIcon={showIcon}\n    style={style}\n    value={value}\n  />\n);\n\nDSSearchBox.propTypes = {\n  containerProps: PropTypes.shape({}),\n  className: PropTypes.string,\n  innerRef: PropTypes.any,\n  /**\n   * Icon to use in the search button\n   */\n  searchIcon: PropTypes.string,\n  /**\n   * Set style to the search box\n   */\n  style: PropTypes.objectOf(PropTypes.string),\n  property: PropTypes.string,\n  /**\n   * Placeholder for the search box\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Whether to trigger the search once the enter is pressed\n   */\n  searchOnEnter: PropTypes.bool,\n  /**\n   * Whether to clear the input on search\n   */\n  clearOnSearch: PropTypes.bool,\n  /**\n   * Allows a function that is triggered once in the search box a keyboard key is released\n   */\n  onKeyUp: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the search is clicked\n   */\n  onSearch: PropTypes.func,\n  /**\n   * Allows a function that is triggered on change\n   */\n  onChange: PropTypes.func,\n  /**\n   * Function that is triggered on blur\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Selected default active value\n   */\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.object,\n  ]),\n  /**\n   * Whether to show an icon or not\n   */\n  showIcon: PropTypes.bool,\n  /**\n   * Disables the search input and button\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Disables the search button\n   */\n  disableButton: PropTypes.bool,\n  readOnly: PropTypes.bool,\n};\n\nexport default DSSearchBox;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport FocusGroupManager from './FocusGroupManager';\n\nexport default function FocusGroupHoc(WrappedComponent, options = {}) {\n  return ({\n    onExitFocusGroup,\n    onFocusPrevGroup,\n    focusKeyBindings,\n    ...props\n  }) => (\n    <FocusGroupManager\n      keyBindings={focusKeyBindings}\n      onExitFocusGroup={onExitFocusGroup}\n      onFocusPrevGroup={onFocusPrevGroup}\n      {...options}\n    >\n      <WrappedComponent {...props} {...options} />\n    </FocusGroupManager>\n  );\n}\n"],"sourceRoot":""}