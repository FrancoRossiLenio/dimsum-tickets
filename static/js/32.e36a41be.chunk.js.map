{"version":3,"sources":["../../../src/Search.js","../../../../../src/form/SearchBox/withSearchable.js","../../../src/utils.js","../../../../src/Toolbar/decorateToolbarChildren.js","../../../../../src/form/TextBox/DSTextBox.js","../../../../src/Toolbar/DSToolbar.js","../../../../../src/plugins/searchable/SearchableTreePlugin.js","../../../../../src/form/ExpandableInput/ExpandableInputImpl.js","../../../../../src/form/ExpandableInput/DSExpandableInput.js","../../../../../src/form/SearchBox/SearchBoxToggle.js"],"names":["createIcon","paths","height","width","WrappedComponent","Searchable","debounce","value","props","React","this","onKeyUp","searchOnEnter","key","e","onSearch","property","clearOnSearch","setState","query","target","onChange","containerProps","rest","buttonRef","prevPropValue","nextProps","PropTypes","string","isFunction","param","children","extraProps","component","cloneElement","className","DSTextBox","autoFocus","disabled","maxLength","minLength","fluidWidth","placeholder","hasError","readOnly","innerRef","type","min","max","clearable","leftComponent","rightComponent","required","variant","otherProps","aria-label","role","ToolbarContainer","withDepth","alignment","size","DSToolbar","autoFocusOnMount","containerRef","useRef","getContainer","keyBindings","Tab","orientation","classProps","mergeRefs","decorateToolbarChildren","transformRecords","records","instance","list","record","transformRecord","searchQuery","getItemLabel","currRecord","markParentsAsChildMatch","itemRenderer","itemProps","autoEscape","highlightClassName","searchWords","textToHighlight","SearchableTreePlugin","createInstancePlugin","prevSearchQuery","usePrevious","shouldWalkChildren","ExpandableInput","aggregatedClasses","opened","InputWrapper","ExpandableInputImpl","prevProps","isOpen","input","focus","triggerComponent","onOpen","onClose","onBlur","InputComponent","style","rightComponents","onClick","node","Component","SearchBoxContainer","SearchBoxToggle","prevValue","executeIfValue","handleSearch","expandableEl","contains","buttonType","icon","showIcon","withSearchable"],"mappings":"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","file":"static/js/32.e36a41be.chunk.js","sourcesContent":["/* eslint-disable */\nimport createIcon from './utils/createIcon';\n\nexport default createIcon({\n  paths: [\n    'M18.869 19.162l-5.943-6.484c1.339-1.401 2.075-3.233 2.075-5.178 0-2.003-.78-3.887-2.197-5.303S9.504 0 7.501 0 3.614.78 2.198 2.197.001 5.497.001 7.5s.78 3.887 2.197 5.303S5.498 15 7.501 15c1.726 0 3.362-.579 4.688-1.645l5.943 6.483a.497.497 0 0 0 .369.162.4997.4997 0 0 0 .369-.837l-.001-.001zM1 7.5C1 3.916 3.916 1 7.5 1S14 3.916 14 7.5 11.084 14 7.5 14 1 11.084 1 7.5z',\n  ],\n  height: 20,\n  width: 20,\n});\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { debounce } from '@elliemae/ds-utilities/utils';\n\nconst withSearchable = (WrappedComponent) => {\n  class Searchable extends Component {\n    debouncedSearch = debounce(this.handleSearch, 200);\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        value: props.value,\n      };\n      this.handleSearch = this.handleSearch.bind(this);\n      this.handleKeyUp = this.handleKeyUp.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n      this.buttonRef = React.createRef();\n    }\n\n    static getDerivedStateFromProps(nextProps, { prevPropValue }) {\n      if (nextProps.value !== prevPropValue) {\n        return {\n          value: nextProps.value,\n          prevPropValue: nextProps.value,\n        };\n      }\n      return null;\n    }\n\n    handleKeyUp(e) {\n      const { onKeyUp, searchOnEnter } = this.props;\n      const { key } = e;\n      if (searchOnEnter && key === 'Enter') {\n        this.handleSearch();\n      }\n      onKeyUp(e);\n    }\n\n    handleSearch() {\n      const { onSearch, property, clearOnSearch, searchOnEnter } = this.props;\n      const { value } = this.state;\n\n      if (clearOnSearch) this.setState({ value: '' });\n      if (searchOnEnter && !value) return;\n      onSearch({\n        query: { [property]: value },\n        property,\n        value,\n      });\n    }\n\n    handleChange({ target }) {\n      const { value } = target;\n      const { searchOnEnter, onChange } = this.props;\n      onChange(value);\n      this.setState({ value }, () => {\n        if (!searchOnEnter) this.debouncedSearch();\n      });\n    }\n\n    render() {\n      const { value } = this.state;\n      const { containerProps, ...rest } = this.props;\n\n      return (\n        <WrappedComponent\n          {...rest}\n          buttonRef={this.buttonRef}\n          containerProps={containerProps}\n          onChange={this.handleChange}\n          onKeyUp={this.handleKeyUp}\n          onSearch={this.handleSearch}\n          value={value}\n        />\n      );\n    }\n  }\n\n  Searchable.defaultProps = {\n    onChange: () => null,\n    onSearch: () => null,\n    onKeyUp: () => null,\n    property: 'all',\n    searchOnEnter: true,\n    clearOnSearch: false,\n    containerProps: {},\n  };\n\n  Searchable.propTypes = {\n    containerProps: PropTypes.shape({}),\n    onChange: PropTypes.func,\n    onSearch: PropTypes.func,\n    onKeyUp: PropTypes.func,\n    property: PropTypes.string,\n    searchOnEnter: PropTypes.bool,\n    clearOnSearch: PropTypes.bool,\n    value: PropTypes.string,\n  };\n\n  return Searchable;\n};\n\nexport default withSearchable;\n","/* eslint-disable no-loops/no-loops, no-cond-assign */\nexport const objectType = obj =>\n  Object.prototype.toString.call(obj).slice(8, -1);\nexport const isDefined = param => typeof param !== 'undefined';\nexport const isUndefined = param => typeof param === 'undefined';\nexport const isFunction = param => typeof param === 'function';\nexport const isNumber = param => typeof param === 'number' && !isNaN(param); // eslint-disable-line\nexport const isString = str => objectType(str) === 'String';\nexport const isArray = arr => objectType(arr) === 'Array';\n\nexport const closest = (target, selector) => {\n  // closest(e.target, '.field')\n  while (target) {\n    // eslint-disable-line\n    if (target.matches && target.matches(selector)) return target;\n    if (target.msMatchesSelector && target.msMatchesSelector(selector))\n      return target;\n    target = target.parentNode;\n  }\n  return null;\n};\n\nexport const getOffsetRect = elem => {\n  // (1)\n  const box = elem.getBoundingClientRect();\n\n  const { body, documentElement } = document;\n\n  // (2)\n  const scrollTop =\n    window.pageYOffset || documentElement.scrollTop || body.scrollTop;\n  const scrollLeft =\n    window.pageXOffset || documentElement.scrollLeft || body.scrollLeft;\n\n  // (3)\n  const clientTop = documentElement.clientTop || body.clientTop || 0;\n  const clientLeft = documentElement.clientLeft || body.clientLeft || 0;\n\n  // (4)\n  const top = box.top + scrollTop - clientTop;\n  const left = box.left + scrollLeft - clientLeft;\n\n  return { top: Math.round(top), left: Math.round(left) };\n};\n\nexport const getTotalScroll = elem => {\n  let top = 0;\n  let left = 0;\n\n  while ((elem = elem.parentNode)) {\n    top += elem.scrollTop || 0;\n    left += elem.scrollLeft || 0;\n  }\n\n  return { top, left };\n};\n\nexport const getTransformProps = (x, y) => ({\n  transform: `translate(${x}px, ${y}px)`,\n});\n\nexport const listWithChildren = (list, childrenProp) =>\n  list.map(item => ({\n    ...item,\n    [childrenProp]: item[childrenProp]\n      ? listWithChildren(item[childrenProp], childrenProp)\n      : [],\n  }));\n\nexport const getAllNonEmptyNodesIds = (items, childrenProp) => {\n  let childrenIds = [];\n  const ids = items\n    .filter(item => item[childrenProp].length)\n    .map(item => {\n      childrenIds = childrenIds.concat(\n        getAllNonEmptyNodesIds(item[childrenProp], childrenProp),\n      );\n      return item.id;\n    });\n\n  return ids.concat(childrenIds);\n};\n","import React, { cloneElement } from 'react';\n\nexport default (children, extraProps = {}) =>\n  React.Children.map(\n    children,\n    component =>\n      component\n        ? cloneElement(component, {\n            ...extraProps,\n            ...component.props,\n            className: `${component.props.className} toolbar-item`,\n          })\n        : component,\n    null,\n  );\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DSInput from '@elliemae/ds-basic/form/Input';\n\nconst DSTextBox = ({\n  containerProps = {},\n  autoFocus = false,\n  disabled = false,\n  maxLength = 255,\n  minLength = 0,\n  fluidWidth = false,\n  placeholder,\n  value = '',\n  hasError = false,\n  readOnly = false,\n  innerRef = null,\n  type = 'text',\n  min = undefined,\n  max = undefined,\n  clearable = false,\n  leftComponent = null,\n  rightComponent = null,\n  required = false,\n  variant,\n  ...otherProps\n}) => (\n  <DSInput\n    {...otherProps}\n    aria-label={otherProps['aria-label'] || 'Text Box'}\n    autoFocus={autoFocus}\n    clearable={clearable}\n    containerProps={containerProps}\n    disabled={disabled}\n    fluidWidth={fluidWidth}\n    hasError={hasError}\n    innerRef={innerRef}\n    leftComponent={leftComponent}\n    max={max}\n    maxLength={maxLength}\n    min={min}\n    minLength={minLength}\n    placeholder={placeholder}\n    readOnly={readOnly}\n    required={required}\n    rightComponent={rightComponent}\n    role=\"textbox\"\n    type={type}\n    value={value}\n    variant={variant}\n  />\n);\n\nDSTextBox.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /**\n   * Whether the text box uses auto focus or not\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Whether the text box is disabled or not\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Max length for the text box\n   */\n  maxLength: PropTypes.number,\n  /**\n   * Min length for the text box\n   */\n  minLength: PropTypes.number,\n  /**\n   * Make the content of the text box fit the container or not\n   */\n  fluidWidth: PropTypes.bool,\n  /**\n   * Placeholder for the text box\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Default value once the component is initialized\n   */\n  value: PropTypes.string,\n  /**\n   * Whether the text box has error or not\n   */\n  hasError: PropTypes.bool,\n  /**\n   * Whether the text box is read only or not\n   */\n  readOnly: PropTypes.bool,\n  min: PropTypes.number,\n  max: PropTypes.number,\n  /**\n   * Whether the text box is clearable or not\n   */\n  clearable: PropTypes.bool,\n  /**\n   * Component to be added at the left side of the text box\n   */\n  leftComponent: PropTypes.element,\n  /**\n   * Component to be added at the right side of the text box\n   */\n  rightComponent: PropTypes.element,\n  /**\n   * Whether the text box is required or not\n   */\n  required: PropTypes.bool,\n  /**\n   * [\n   *  'variant-default',\n   *  'variant-focus',\n   *  'variant-active',\n   *  'variant-disabled',\n   * ]\n   */\n  variant: PropTypes.string,\n};\n\nexport default DSTextBox;\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport FocusGroupProvider from '@elliemae/ds-shared/FocusGroup/FocusGroupManager';\nimport { mergeRefs } from '@elliemae/ds-utilities/system';\nimport decorateToolbarChildren from './decorateToolbarChildren';\nimport Item from './ToolbarItem';\nimport ToolbarGroup from './ToolbarGroup';\nimport Divider from './ToolbarDivider';\n\nconst blockName = 'toolbar';\n\nconst ToolbarContainer = aggregatedClasses('div')(\n  blockName,\n  null,\n  ({ withDepth, alignment, size }) => ({\n    'without-depth': !withDepth,\n    [alignment]: !!alignment,\n    [size]: size,\n  }),\n);\n\nconst DSToolbar = ({\n  containerProps = {},\n  innerRef,\n  withDepth = true,\n  alignment = 'right', // left || right\n  autoFocusOnMount = true,\n  children = [],\n  size = 'normal',\n  ...otherProps\n}) => {\n  const containerRef = useRef(null);\n  return (\n    <FocusGroupProvider\n      autoFocusOnMount={autoFocusOnMount}\n      getContainer={() => containerRef.current}\n      keyBindings={{\n        Tab: 'next',\n      }}\n      orientation=\"horizontal\"\n    >\n      <ToolbarContainer\n        {...containerProps}\n        {...otherProps}\n        classProps={{ withDepth, alignment, size }}\n        innerRef={mergeRefs(innerRef, containerRef)}\n      >\n        {decorateToolbarChildren(children)}\n      </ToolbarContainer>\n    </FocusGroupProvider>\n  );\n};\n\nDSToolbar.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /** Shows a shadow rear the toolbar */\n  withDepth: PropTypes.bool,\n  /** Aligns the toolbar to the left or right */\n  alignment: PropTypes.oneOf(['right', 'left']),\n  /** Toolbar size */\n  size: PropTypes.oneOf(['normal', 'compact']),\n};\n\nexport { Item as ToolbarItem, ToolbarGroup, Divider as ToolbarDivider };\n\nexport default DSToolbar;\n","import createInstancePlugin from '@elliemae/ds-shared/createDataInstance/createInstancePlugin';\nimport Highlighter from 'react-highlight-words';\nimport React from 'react';\nimport usePrevious from '@elliemae/ds-utilities/hooks/usePrevious';\n\nconst markParentsAsChildMatch = (record) => {\n  let currRecord = record;\n\n  while (currRecord.parentNode) {\n    currRecord.parentNode.childMatch = true;\n    currRecord = currRecord.parentNode;\n  }\n};\n\nfunction transformRecords(records, instance) {\n  // gets the ul with overflow: auto\n  const list = instance.getListRef()?.current?.parentElement;\n  const {\n    props: { searchQuery },\n  } = instance.getInstance();\n  if (!searchQuery) return records;\n  // Scroll the list to the top once the search is triggered\n  list?.scrollTo(0, 0);\n  return records.filter((record) => record.selfMatch || record.childMatch);\n}\ntransformRecords.order = 0;\n\nfunction transformRecord(record, instance) {\n  const {\n    props: { searchQuery },\n    getItemLabel,\n  } = instance.getInstance();\n  if (\n    searchQuery &&\n    getItemLabel(record).toLowerCase().indexOf(searchQuery.toLowerCase()) !== -1\n  ) {\n    markParentsAsChildMatch(record);\n    // eslint-disable-next-line no-param-reassign\n    record.selfMatch = true;\n  }\n  return record;\n}\ntransformRecord.order = 0;\n\nconst itemRenderer = (value, itemProps, instance) => {\n  const {\n    props: { searchQuery, showHighlight = true },\n  } = instance.getInstance();\n  if (!showHighlight || !searchQuery) return value;\n  return (\n    <Highlighter\n      autoEscape\n      highlightClassName=\"tree-text-highlight\"\n      searchWords={[searchQuery]}\n      textToHighlight={value}\n    />\n  );\n};\nitemRenderer.order = 0;\n\nexport const SearchableTreePlugin = createInstancePlugin('searchable-tree', {\n  instance: (instance) => {\n    const {\n      props: { searchQuery },\n    } = instance;\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const prevSearchQuery = usePrevious(searchQuery);\n    return {\n      prevSearchQuery,\n    };\n  },\n  shouldWalkChildren: (record, instance) => {\n    const {\n      props: { searchQuery },\n    } = instance.getInstance();\n    return !!searchQuery;\n  },\n  record: transformRecord,\n  records: transformRecords,\n  itemRenderer,\n});\n","import React, { Component, cloneElement } from 'react';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport { isFunction } from '@elliemae/ds-shared/utils';\nimport { InputAddonWrapper } from '@elliemae/ds-basic/form/Input';\n\nconst blockName = 'expandable-input';\n\nconst ExpandableInput = aggregatedClasses('div')(\n  blockName,\n  null,\n  ({ isOpen }) => ({ opened: isOpen }),\n);\nconst InputWrapper = aggregatedClasses(InputAddonWrapper)(\n  blockName,\n  'wrapper',\n  ({ isOpen }) => ({ opened: isOpen }),\n);\n\nexport default class ExpandableInputImpl extends Component {\n  componentDidUpdate(prevProps) {\n    const { isOpen } = this.props;\n    if (isOpen && isOpen !== prevProps.isOpen) this.input.focus();\n  }\n\n  render() {\n    const {\n      innerRef,\n      triggerComponent,\n      children,\n      width,\n      isOpen,\n      onOpen,\n      onClose,\n      onBlur,\n      containerProps,\n    } = this.props;\n    const InputComponent = React.Children.only(children);\n    const handleTriggerClick = e => {\n      if (isFunction(triggerComponent.onClick)) triggerComponent.onClick(e);\n      if (isOpen) {\n        onClose();\n      } else {\n        onOpen();\n      }\n    };\n\n    return (\n      <ExpandableInput\n        {...containerProps}\n        classProps={{ isOpen }}\n        innerRef={innerRef}\n        style={{ width: isOpen && width }}\n      >\n        <InputWrapper\n          rightComponents={[\n            cloneElement(triggerComponent, {\n              key: 'handler',\n              onClick: handleTriggerClick,\n            }),\n          ]}\n        >\n          {cloneElement(InputComponent, {\n            className: 'expandable-input__input',\n            innerRef: node => (this.input = node),\n            onBlur,\n          })}\n        </InputWrapper>\n      </ExpandableInput>\n    );\n  }\n}\n","import React from 'react';\nimport ExpandableInputImpl from './ExpandableInputImpl';\n\nconst DSExpandableInput = ({\n  containerProps = {},\n  innerRef,\n  className = '',\n  style = {},\n  triggerComponent = undefined,\n  children,\n  isOpen = false,\n  onOpen = () => null,\n  onClose = () => null,\n  onBlur = () => null,\n  width = undefined,\n}) => (\n  <ExpandableInputImpl\n    className={className}\n    containerProps={containerProps}\n    innerRef={innerRef}\n    isOpen={isOpen}\n    onBlur={onBlur}\n    onClose={onClose}\n    onOpen={onOpen}\n    style={style}\n    triggerComponent={triggerComponent}\n    width={width}\n  >\n    {children}\n  </ExpandableInputImpl>\n);\n\nexport default DSExpandableInput;\n","import React, { Component } from 'react';\nimport { debounce } from '@elliemae/ds-utilities/utils';\nimport SearchIcon from '@elliemae/ds-icons/Search';\nimport DSTextBox from '@elliemae/ds-basic/form/TextBox';\nimport DSButton from '@elliemae/ds-basic/Button';\nimport DSExpandableInput from '@elliemae/ds-basic/form/ExpandableInput';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport withSearchable from './withSearchable';\n\nconst blockName = 'searchbox-toggle';\nconst SearchBoxContainer = aggregatedClasses('div')(blockName);\n\nclass SearchBoxToggle extends Component {\n  hideInput = debounce(this.handleHideInput, 100);\n\n  showInput = debounce(this.handleShowInput, 100);\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false,\n    };\n\n    this.hideInput = this.hideInput.bind(this);\n    this.showInput = this.showInput.bind(this);\n    this.handleHideInput = this.handleHideInput.bind(this);\n    this.handleShowInput = this.handleShowInput.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    const { clearOnSearch, value } = this.props;\n    const { value: prevValue } = prevProps;\n    if (\n      clearOnSearch &&\n      value !== prevValue &&\n      !value &&\n      prevValue &&\n      prevValue.length !== 1\n    ) {\n      this.handleHideInput(false);\n    }\n  }\n\n  handleSearch() {\n    const { onSearch, clearOnSearch } = this.props;\n    onSearch();\n    if (clearOnSearch) this.setState({ isOpen: false });\n  }\n\n  handleHideInput(executeIfValue = true) {\n    const { value } = this.props;\n    if (value) {\n      if (executeIfValue) this.handleSearch();\n    } else {\n      this.setState({ isOpen: false });\n    }\n  }\n\n  handleBlur(e) {\n    if (this.expandableEl.contains(e.target)) return;\n    this.hideInput(false);\n  }\n\n  handleShowInput() {\n    this.setState({ isOpen: true });\n  }\n\n  render() {\n    const {\n      onChange,\n      onKeyUp,\n      value,\n      placeholder,\n      clearable,\n      className,\n      buttonRef,\n      containerProps,\n      width = 300,\n    } = this.props;\n    const { isOpen } = this.state;\n    return (\n      <SearchBoxContainer>\n        <DSExpandableInput\n          containerProps={containerProps}\n          innerRef={node => (this.expandableEl = node)}\n          isOpen={isOpen}\n          onBlur={this.handleBlur}\n          onClose={this.hideInput}\n          onOpen={this.showInput}\n          triggerComponent={\n            <DSButton\n              key=\"handler\"\n              buttonType=\"text\"\n              icon={<SearchIcon />}\n              innerRef={buttonRef}\n            />\n          }\n          width={width}\n        >\n          <DSTextBox\n            className={`expandable-input__input ${className}`}\n            clearable={clearable}\n            onChange={onChange}\n            onKeyUp={onKeyUp}\n            placeholder={placeholder}\n            showIcon={false}\n            value={value}\n          />\n        </DSExpandableInput>\n      </SearchBoxContainer>\n    );\n  }\n}\n\nexport default withSearchable(SearchBoxToggle);\n"],"sourceRoot":""}