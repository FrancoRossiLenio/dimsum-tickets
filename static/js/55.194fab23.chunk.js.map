{"version":3,"sources":["DateTimePicker/PUI-3728.js"],"names":["memo","useState","label","show","toggle","setToggle","value","moment","utc","local","loan","setLoan","changeEvent","event","key","newValue","format","changeListener","selectedDate","console","log","_i","isValid","style","width","onClick","e","preventDefault","date","_d","datePickerProps","hideKeyboardShortcutsPanel","onDateChange","placeholder","timePickerProps","containerProps","id","disabled","onChange"],"mappings":"+JA2EeA,0BAtEG,WAChB,IADsB,EAEMC,mBAAS,CACnCC,MAAO,OACPC,MAAM,IAJc,mBAEfC,EAFe,KAEPC,EAFO,OAMEJ,mBAAS,CAC/BK,MAAOC,IAAOC,IANG,wBAMaC,UAPV,mBAMfC,EANe,KAMTC,EANS,KAUhBC,EAAc,SAACC,EAAOC,GAC1B,IAAMC,EAAWF,EAAQN,IAAOM,GAAOL,MAAMQ,SAAWH,EACpDC,GACFH,EAAQ,CACNG,IAAKA,EACLR,MAAOS,KAKPE,EAAiB,SAACC,GACtBC,QAAQC,IAAI,eAAeF,GACtBA,EAAaG,IAGhBd,IAAOW,EAAaG,GAAI,cAAc,GAAMC,WAC5Cf,IAAOW,EAAaG,GAAI,cAAc,GAAMC,YAE5CV,EAAYM,GALZN,EAAYM,IAuBhB,OACE,yBAAKK,MAAO,CAACC,MAAO,UAClB,4BAAQC,QAhBZ,SAAqBC,GACnBA,EAAEC,iBACF,IAAMxB,GAAQC,EAAOD,KACfD,EAAQE,EAAOD,KAAO,OAAS,OAKrC,GAJAE,EAAU,CACRH,MAAOA,EACPC,KAAMA,IAEJA,EAAM,CACR,IAAMyB,EAAOrB,IAAOC,IAxCL,wBAwCqBC,QACpCU,QAAQC,IAAIQ,GACZjB,EAAQ,CAACL,MAAOC,IAAOC,IAAIoB,EAAKC,IAAIpB,aAKLL,EAAOF,OACpCE,EAAOD,KACP,kBAAC,IAAD,CACEqB,MAAO,IACPI,KAAMlB,EAAKJ,MACXwB,gBAAiB,CACfC,4BAA4B,EAC5BC,aAAcf,GAEhBgB,YAAY,uBACZC,gBAAiB,CACfC,eAAgB,CAAEC,GAAI,gBACtBC,UAAU,EACVC,SAAUrB,KAGZ,U","file":"static/js/55.194fab23.chunk.js","sourcesContent":["import React, {useState, memo} from 'react';\nimport moment from 'moment';\nimport DSDateTimePicker from '@elliemae/ds-date-time-picker';\n\n\nconst Component = () => {\n  const fieldValue = '2020-08-21T19:38:28Z'\n  const [toggle, setToggle] = useState({\n    label: 'HIDE',\n    show: true\n  });\n  const [loan, setLoan] = useState({\n    value: moment.utc(fieldValue).local()\n  });\n\n  const changeEvent = (event, key) => {\n    const newValue = event ? moment(event).utc().format() : event;\n    if (key) {\n      setLoan({\n        key: key,\n        value: newValue,\n      });\n    }\n  };\n\n  const changeListener = (selectedDate) => {\n    console.log('selectDate: ',selectedDate);\n    if (!selectedDate._i) {\n      changeEvent(selectedDate);\n    } else if (\n      moment(selectedDate._i, 'YYYY-MM-DD', true).isValid() ||\n      moment(selectedDate._i, 'MM/DD/YYYY', true).isValid()\n    ) {\n      changeEvent(selectedDate);\n    }\n  }\n\n  function toggleValue(e) {\n    e.preventDefault();\n    const show = !toggle.show;\n    const label = toggle.show ? 'SHOW' : 'HIDE';\n    setToggle({\n      label: label,\n      show: show\n    });\n    if (show) {\n      const date = moment.utc(fieldValue).local();\n      console.log(date);\n      setLoan({value: moment.utc(date._d).local()})\n    }\n  }\n  return (\n    <div style={{width: '200px'}}>\n      <button onClick={toggleValue}>{toggle.label}</button>\n      { toggle.show ?\n        <DSDateTimePicker\n          width={200}\n          date={loan.value}\n          datePickerProps={{\n            hideKeyboardShortcutsPanel: true,\n            onDateChange: changeListener,\n          }}\n          placeholder=\"Select date and time\"\n          timePickerProps={{\n            containerProps: { id: 'my-custom-id' },\n            disabled: false,\n            onChange: changeListener,\n          }}\n        />\n        : null\n      }\n    </div>\n\n  )\n}\nexport default memo(Component);\n"],"sourceRoot":""}