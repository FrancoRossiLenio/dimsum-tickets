{"version":3,"sources":["Date/PUI-4076.js"],"names":["memo","useState","label","show","toggle","setToggle","value","loan","setLoan","changeEvent","event","newValue","moment","changeListener","selectedDate","_i","isValid","console","log","style","width","onClick","e","preventDefault","className","containerProps","id","disabled","enableOutsideDays","firstDayOfWeek","hasError","hideKeyboardShortcutsPanel","isDayBlocked","isDayHighlighted","isOutsideRange","keepOpenOnDateSelect","onBlur","onChange","onClose","onFocus","placeholder","readOnly","required","screenReaderInputMessage","transitionDuration","verticalSpacing"],"mappings":"+JA2EeA,0BAxEG,WAChB,IADsB,EAEMC,mBAAS,CACnCC,MAAO,OACPC,MAAM,IAJc,mBAEfC,EAFe,KAEPC,EAFO,OAMEJ,mBAAS,CAC/BK,MAAO,OAPa,mBAMfC,EANe,KAMTC,EANS,KAUhBC,EAAc,SAACC,GACnB,IAAMC,EAAWD,EAAQE,IAAOF,GAASA,EACzCF,EAAQ,CACNF,MAAOK,KAGLE,EAAiB,SAACC,GACjBA,EAAaC,IAIhBH,IAAOE,EAAaC,GAAI,cAAc,GAAMC,WAC5CJ,IAAOE,EAAaC,GAAI,cAAc,GAAMC,aAE5CC,QAAQC,IAAI,iBAAiBJ,GAC7BL,EAAYK,KAPZG,QAAQC,IAAI,eAAeJ,GAC3BL,EAAYK,KAkBhB,OACE,yBAAKK,MAAO,CAACC,MAAO,UAClB,4BAAQC,QAXZ,SAAqBC,GACnBA,EAAEC,iBACF,IAAMpB,GAAQC,EAAOD,KACfD,EAAQE,EAAOD,KAAO,OAAS,OACrCE,EAAU,CACRH,MAAOA,EACPC,KAAMA,MAKyBC,EAAOF,OACpCE,EAAOD,KACP,kBAAC,IAAD,CACEqB,UAAU,qBACVC,eAAgB,CAAEC,GAAI,gBACtBC,UAAU,EACVC,mBAAmB,EACnBC,eAAgB,EAChBC,UAAU,EACVC,4BAA0B,EAC1BC,aAAc,kBAAM,GACpBC,iBAAkB,kBAAM,GACxBC,gBAAgB,EAChBC,sBAAoB,EACpBC,OAAQ,SAAAtB,GAAY,OAAID,EAAeC,IACvCuB,SAAU,SAACvB,GACTD,EAAeC,IAEjBwB,QAAS,SAACxB,GAAD,OAAkBD,EAAeC,IAC1CyB,QAAS,kBAAMtB,QAAQC,IAAI,YAC3BsB,YAAY,cACZC,UAAU,EACVC,UAAU,EACVC,yBAAyB,cACzBC,mBAAoB,EACpBtC,MAAOC,EAAKD,MACZuC,gBAAiB,IAEjB,U","file":"static/js/54.a8688228.chunk.js","sourcesContent":["import React, {useState, useEffect, memo} from 'react';\nimport moment from 'moment';\nimport DSDatePicker from '@elliemae/ds-date-picker';\nconst Component = () => {\n  const fieldValue = '2020-08-21T19:38:28Z'\n  const [toggle, setToggle] = useState({\n    label: 'HIDE',\n    show: true\n  });\n  const [loan, setLoan] = useState({\n    value: null\n  });\n\n  const changeEvent = (event) => {\n    const newValue = event ? moment(event) : event;\n    setLoan({\n      value: newValue,\n    });\n  };\n  const changeListener = (selectedDate) => {\n    if (!selectedDate._i) {\n      console.log('selectDate: ',selectedDate);\n      changeEvent(selectedDate);\n    } else if (\n      moment(selectedDate._i, 'YYYY-MM-DD', true).isValid() ||\n      moment(selectedDate._i, 'MM/DD/YYYY', true).isValid()\n    ) {\n      console.log('1.selectDate: ',selectedDate);\n      changeEvent(selectedDate);\n    }\n  };\n  function toggleValue(e) {\n    e.preventDefault();\n    const show = !toggle.show;\n    const label = toggle.show ? 'SHOW' : 'HIDE';\n    setToggle({\n      label: label,\n      show: show\n    });\n  }\n  return (\n    <div style={{width: '200px'}}>\n      <button onClick={toggleValue}>{toggle.label}</button>\n      { toggle.show ?\n        <DSDatePicker\n          className='example-class-name'\n          containerProps={{ id: 'my-custom-id' }}\n          disabled={false}\n          enableOutsideDays={false}\n          firstDayOfWeek={0}\n          hasError={false}\n          hideKeyboardShortcutsPanel\n          isDayBlocked={() => false}\n          isDayHighlighted={() => false}\n          isOutsideRange={false}\n          keepOpenOnDateSelect\n          onBlur={selectedDate => changeListener(selectedDate)}\n          onChange={(selectedDate) => {\n            changeListener(selectedDate)\n          }}\n          onClose={(selectedDate) => changeListener(selectedDate)}\n          onFocus={() => console.log('focused')}\n          placeholder='Select Date'\n          readOnly={false}\n          required={false}\n          screenReaderInputMessage='Select date'\n          transitionDuration={0}\n          value={loan.value}\n          verticalSpacing={0}\n        />\n        : null\n      }\n    </div>\n  )\n}\nexport default memo(Component);\n"],"sourceRoot":""}