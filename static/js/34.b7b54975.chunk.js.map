{"version":3,"sources":["utils/randomTreeNodes.js","components/TreeToolbar.js","components/TreeContainer.js","TreeView/ToggleExpand.js","TreeView/InModal/ToggleExpand.js","TreeView/InModal/InitialSelections.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["randomEntity","parentID","id","uuidv4","isGroup","random","children","randomEntities","undefined","name","type","parent","count","Array","fill","map","randomEntityNoChildren","randomEntitiesNoChildren","randomEntityMoreGroup","randomEntitiesMoreGroups","TreeToolbar","searchQuery","setSearchQuery","toggleExpandAll","withDepth","buttonType","labelText","onClick","clearable","containerProps","onSearch","value","placeholder","searchOnEnter","margin","orientation","TreeContainer","styled","div","props","offsetHeight","nodes","ToggleExpand","instanceRef","useRef","useState","current","actions","useEffect","style","height","data","fluid","groupIcon","isMultiSelect","itemIcon","plugins","SelectablePluginTree","SearchableTreePlugin","showChildrenAmount","isOpen","setOpen","toggle","padding","modalTitle","modalType","MODAL_TYPE_V2","DECISION","onClose","onConfirm","onReject","shouldCloseOnOverlayClick","size","version","selectionHash","1","2","3","5","6","7","selection","_toConsumableArray","arr","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError"],"mappings":"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","file":"static/js/34.b7b54975.chunk.js","sourcesContent":["import { random } from 'lodash';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const randomEntity = (parentID) => {\n  const id = uuidv4();\n  const isGroup = random(0, 4) < 1;\n  const children = isGroup\n    ? randomEntities(random(0, 5), id)\n    : undefined;\n  return {\n    id,\n    name: `${random(0, 1) > 0 ? 'John Doe' : 'Jon Snow'} ${id}`,\n    type: isGroup ? 'group' : 'single',\n    parent: parentID,\n    children,\n  };\n};\nexport const randomEntities = (count, parentID) =>\n  new Array(count).fill(0).map(() => {\n    return randomEntity(parentID);\n  });\n\n/** With increased chances of getting no children group */\nexport const randomEntityNoChildren = () => {\n  const id = uuidv4();\n  const isGroup = random(0, 4) < 2;\n  let children = isGroup\n    ? randomEntities(random(0, 2), id)\n    : undefined;\n  if (random(0, 4) < 2) children = [];\n  return {\n    id,\n    name: `${random(0, 1) > 0 ? 'John Doe' : 'Jon Snow'} ${id}`,\n    type: isGroup ? 'group' : 'single',\n    children,\n    isGroup,\n  };\n};\n/** With increased chances of getting no children groups */\nexport const randomEntitiesNoChildren = (count) =>\n  new Array(count).fill(0).map(() => {\n    return randomEntityNoChildren();\n  });\n\n/** With increased chances of getting a group */\nexport const randomEntityMoreGroup = () => {\n  const id = uuidv4();\n  const isGroup = random(0, 4) < 3;\n  let children = isGroup\n    ? randomEntities(random(0, 2), id)\n    : undefined;\n  if (random(0, 4) < 2) children = [];\n  return {\n    id,\n    name: `${random(0, 1) > 0 ? 'John Doe' : 'Jon Snow'} ${id}`,\n    type: isGroup ? 'group' : 'single',\n    children,\n    isGroup,\n  };\n};\n/** With increased chances of getting more groups */\nexport const randomEntitiesMoreGroups = (count) =>\n  new Array(count).fill(0).map(() => {\n    return randomEntityMoreGroup();\n  });\n","import React from 'react';\nimport SearchBox from '@elliemae/ds-basic/form/SearchBox';\nimport DSToolbar from '@elliemae/ds-basic/Toolbar';\nimport DSSeparator from '@elliemae/ds-basic/Separator';\nimport DSButton from '@elliemae/ds-basic/Button';\n\nexport const TreeToolbar = ({\n  searchQuery,\n  setSearchQuery,\n  toggleExpandAll,\n}) => {\n  return (\n    <>\n      <DSToolbar withDepth={false}>\n        {toggleExpandAll && (\n          <DSButton\n            buttonType=\"secondary\"\n            labelText=\"Toggle Expand\"\n            onClick={toggleExpandAll}\n          />\n        )}\n        <SearchBox\n          clearable\n          containerProps={{ 'data-testid': 'tree-searchbox' }}\n          onSearch={({ value }) => setSearchQuery(value)}\n          placeholder=\"Search all\"\n          searchOnEnter={false}\n          value={searchQuery}\n        />\n      </DSToolbar>\n      <DSSeparator\n        margin=\"none\"\n        orientation=\"horizontal\"\n        type=\"non-form\"\n      />\n    </>\n  );\n};\n","import styled from 'styled-components';\n\n/** Fixes tree height issue */\nexport const TreeContainer = styled.div`\n  height: calc(100% - ${(props) => props.offsetHeight || 80}px);\n`;\n","import React, { useRef, useState, useEffect } from 'react';\nimport {\n  TreeView,\n  SelectablePluginTree,\n  SearchableTreePlugin,\n} from '@elliemae/ds-treeview';\nimport Folder from '@elliemae/ds-icons/Folder';\nimport FilePdf from '@elliemae/ds-icons/FilePdf';\nimport { TreeToolbar } from '../components/TreeToolbar';\nimport { randomEntitiesMoreGroups } from '../utils/randomTreeNodes';\nimport { TreeContainer } from '../components/TreeContainer';\n// import { SearchableTreePlugin } from './SearchableTreePlugin';\n\nconst nodes = randomEntitiesMoreGroups(100);\n\nconst ToggleExpand = (props) => {\n  const instanceRef = useRef(null);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const toggleExpandAll = () =>\n    instanceRef.current.actions.toggleExpandAll();\n\n  useEffect(() => {\n    toggleExpandAll();\n    return () => {}; // fixes modal error\n  }, []);\n\n  return (\n    <TreeContainer offsetHeight={48}>\n      <div style={{ height: '100%' }}>\n        <TreeToolbar\n          searchQuery={searchQuery}\n          setSearchQuery={setSearchQuery}\n          toggleExpandAll={toggleExpandAll}\n        />\n        <TreeView\n          data={nodes}\n          fluid\n          groupIcon={<Folder />}\n          instanceRef={instanceRef}\n          isMultiSelect\n          itemIcon={<FilePdf />}\n          plugins={[SelectablePluginTree, SearchableTreePlugin]}\n          searchQuery={searchQuery}\n          showChildrenAmount\n          {...props}\n        />\n      </div>\n    </TreeContainer>\n  );\n};\n\nexport default ToggleExpand;\n","import React, { useState } from 'react';\nimport ToggleExpand from '../ToggleExpand';\nimport DSModal, { MODAL_TYPE_V2 } from '@elliemae/ds-modal';\nimport DSButton from '@elliemae/ds-basic/Button';\n\nexport default (props) => {\n  const [isOpen, setOpen] = useState(false);\n  const toggle = () => setOpen(!isOpen);\n  return (\n    <>\n      <div style={{ padding: '2rem 0' }}>\n        <DSButton labelText=\"Toggle Modal\" onClick={toggle} />\n      </div>\n      <DSModal\n        isOpen={isOpen}\n        modalTitle=\"Demo Modal with TreeView\"\n        modalType={MODAL_TYPE_V2.DECISION}\n        onClose={toggle}\n        onConfirm={toggle}\n        onReject={toggle}\n        shouldCloseOnOverlayClick\n        size=\"large\"\n        version={2}\n      >\n        <div style={{ height: '400px' }}>\n          <ToggleExpand {...props} />\n        </div>\n      </DSModal>\n    </>\n  );\n};\n","import React from 'react';\nimport ToggleExpand from './ToggleExpand';\nimport { randomEntitiesMoreGroups } from '../../utils/randomTreeNodes';\n\nconst nodes = [\n  {\n    id: '1',\n    name: `Initially Selected Group`,\n    type: 'group',\n    children: [\n      {\n        id: '2',\n        name: `Element A`,\n        type: 'group',\n        children: [\n          {\n            id: '3',\n            name: `First Child`,\n            type: 'single',\n            children: [],\n          },\n          {\n            id: '4',\n            name: `Second Child`,\n            type: 'single',\n            children: [],\n          },\n        ],\n        isGroup: true,\n      },\n      {\n        id: '5',\n        name: `Element B`,\n        type: 'group',\n        children: [\n          {\n            id: '6',\n            name: `First Child`,\n            type: 'single',\n            children: [],\n          },\n          {\n            id: '7',\n            name: `Second Child`,\n            type: 'single',\n            children: [],\n          },\n        ],\n        isGroup: true,\n      },\n    ],\n    isGroup: true,\n  },\n  ...randomEntitiesMoreGroups(100),\n];\n\nconst selectionHash = {\n  1: 'mixed',\n  2: 'mixed',\n  3: true,\n  5: true,\n  6: true,\n  7: true,\n};\n\nexport default () => (\n  <ToggleExpand data={nodes} selection={selectionHash} />\n);\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}